{"version":3,"file":"static/js/60.0d1dfb67.chunk.js","mappings":"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","sources":["components/CalendarToolBar/PeriodSelect/PeriodSelect.styled.jsx","components/CalendarToolBar/PeriodSelect/PeriodSelect.jsx","components/CalendarToolBar/CalendarToolBar.jsx","components/WrapperCalendar/WrapperCalendar.jsx","pages/CalendarPage/CalendarPage.jsx","../node_modules/date-fns/esm/addMonths/index.js","../node_modules/date-fns/esm/add/index.js"],"sourcesContent":["import { styled } from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const PeriodTypeSelect = styled.div`\n  display: flex;\n  margin-top: 18px;\n  color: #3e85f3;\n  text-align: center;\n  /* font-family: Inter; */\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 1.28;\n\n  @media screen and (min-width: 768px) {\n    margin-top: 0;\n    font-size: 16px;\n    line-height: 1.12;\n  }\n`;\n\nexport const BtnTypeSelectMonth = styled(NavLink)`\n  padding: 8px 16px;\n  border-radius: 8px 0px 0px 8px;\n  border-right: 1px solid rgba(62, 133, 243, 0.2);\n  background: #cae8ff;\n  cursor: pointer;\n`;\nexport const BtnTypeSelectDay = styled(NavLink)`\n  padding: 8px 25px;\n  border-radius: 0px 8px 8px 0px;\n  background: #e3f3ff;\n  cursor: pointer;\n`;\n","import { format } from \"date-fns\"\nimport { BtnTypeSelectDay, BtnTypeSelectMonth, PeriodTypeSelect } from \"./PeriodSelect.styled\"\n\nexport const PeriodSelect = () => {\n  const date = format(new Date(), 'yyyy-MM-dd')\n  const month = format(new Date(), 'yyyy-MM')\n  return (\n      \n        <PeriodTypeSelect>\n        <BtnTypeSelectMonth to={`month/${month}`}>\n          Month\n        </BtnTypeSelectMonth>\n        <BtnTypeSelectDay to={`day/${date}`}>Day</BtnTypeSelectDay>\n      </PeriodTypeSelect>\n    )\n}","// import { useState } from 'react';\nimport { Wrapper } from './CalendarToolBar.styled';\nimport { PeriodSelect } from './PeriodSelect/PeriodSelect';\n\nimport { WrapperPaginator } from './WrapperPaginator/WrapperPaginator';\n\nexport const CalendarToolBar = ({\n  dayInterval,\n  onNext,\n  onPrev,\n  dateToday,\n  onClickDate,\n}) => {\n  // const [activePeriod, setActivePeriod] = useState('month');\n\n  // const selectPeriod = value => {\n  //   setActivePeriod(value)\n  // }\n\n  return (\n    <Wrapper>\n      <WrapperPaginator\n        dayInterval={dayInterval}\n        onNext={onNext}\n        onPrev={onPrev}\n        dateToday={dateToday}\n        onClickDate={onClickDate}\n      />\n      <PeriodSelect />\n    </Wrapper>\n  );\n};\n","import { CalendarToolBar } from 'components/CalendarToolBar/CalendarToolBar';\n// import  ChoosedMonth  from \"components/ChoosedMonth/ChoosedMonth\";\n// import Spinner from 'components/Spinner/Spinner';\nimport {\n  add,\n  eachDayOfInterval,\n  endOfMonth,\n  endOfWeek,\n  format,\n  parse,\n  startOfWeek,\n} from 'date-fns';\nimport { useState } from 'react';\n// import { Suspense } from \"react\";\n// import { Outlet } from \"react-router-dom\";\n\nexport const WrapperCalendar = () => {\n  const date = format(new Date(), 'MMMM yyyy');\n  const [activeDate, setActiveDate] = useState(date);\n\n  let firstDayCurrentMonth = parse(activeDate, 'MMMM yyyy', new Date());\n\n  const handleClick = e => {\n    // const selectDate = e.currentTarget.dataset.day;\n  };\n  const nextMonth = () => {\n    let firstDayNextMonth = add(firstDayCurrentMonth, { months: 1 });\n    setActiveDate(format(firstDayNextMonth, 'MMMM yyyy'));\n  };\n\n  const prevMonth = () => {\n    let firstDayPrevMonth = add(firstDayCurrentMonth, { months: -1 });\n    setActiveDate(format(firstDayPrevMonth, 'MMMM yyyy'));\n  };\n\n  const result = eachDayOfInterval({\n    start: startOfWeek(firstDayCurrentMonth, { weekStartsOn: 1 }),\n    end: endOfWeek(endOfMonth(firstDayCurrentMonth), { weekStartsOn: 1 }),\n  });\n\n  return (\n    <>\n      <CalendarToolBar\n        dayInterval={result}\n        onNext={nextMonth}\n        onPrev={prevMonth}\n        dateToday={activeDate}\n        onClickDate={handleClick}\n      />\n      {/* <ChoosedMonth\n        dayInterval={result}\n        onNext={nextMonth}\n        onPrev={prevMonth}\n        dateToday={activeDate}\n      /> */}\n    </>\n  );\n};\n","// import { CalendarToolBar } from 'components/CalendarToolBar/CalendarToolBar';\n\n// import { ChoosedMonth } from 'components/ChoosedMonth/ChoosedMonth';\n// import {\n//   add,\n//   eachDayOfInterval,\n//   endOfMonth,\n//   endOfWeek,\n//   format,\n//   parse,\n//   startOfWeek,\n// } from 'date-fns';\n// import { useEffect } from 'react';\n// import { useState } from 'react';\n\nimport Spinner from 'components/Spinner/Spinner';\nimport { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { WrapperCalendar } from 'components/WrapperCalendar/WrapperCalendar';\n\nconst CalendarPage = () => {\n  \n\n  return (\n    <>\n      <WrapperCalendar />\n      <Suspense fallback={<Spinner />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default CalendarPage;\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  var dayOfMonth = date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport addDays from \"../addDays/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n *\n * | Key            | Description                        |\n * |----------------|------------------------------------|\n * | years          | Amount of years to be added        |\n * | months         | Amount of months to be added       |\n * | weeks          | Amount of weeks to be added        |\n * | days           | Amount of days to be added         |\n * | hours          | Amount of hours to be added        |\n * | minutes        | Amount of minutes to be added      |\n * | seconds        | Amount of seconds to be added      |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport default function add(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || _typeof(duration) !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;\n\n  // Add years and months\n  var date = toDate(dirtyDate);\n  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date;\n\n  // Add weeks and days\n  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;\n\n  // Add days, hours, minutes and seconds\n  var minutesToAdd = minutes + hours * 60;\n  var secondsToAdd = seconds + minutesToAdd * 60;\n  var msToAdd = secondsToAdd * 1000;\n  var finalDate = new Date(dateWithDays.getTime() + msToAdd);\n  return finalDate;\n}"],"names":["PeriodTypeSelect","styled","_templateObject","_taggedTemplateLiteral","BtnTypeSelectMonth","NavLink","_templateObject2","BtnTypeSelectDay","_templateObject3","PeriodSelect","date","format","Date","month","_jsxs","children","_jsx","to","concat","CalendarToolBar","_ref","dayInterval","onNext","onPrev","dateToday","onClickDate","Wrapper","WrapperPaginator","WrapperCalendar","_useState","useState","_useState2","_slicedToArray","activeDate","setActiveDate","firstDayCurrentMonth","parse","result","eachDayOfInterval","start","startOfWeek","weekStartsOn","end","endOfWeek","endOfMonth","_Fragment","firstDayNextMonth","add","months","firstDayPrevMonth","e","Suspense","fallback","Spinner","Outlet","addMonths","dirtyDate","dirtyAmount","requiredArgs","arguments","toDate","amount","toInteger","isNaN","NaN","dayOfMonth","getDate","endOfDesiredMonth","getTime","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","duration","_typeof","years","weeks","days","hours","minutes","seconds","dateWithMonths","dateWithDays","addDays","minutesToAdd","secondsToAdd","msToAdd","finalDate"],"sourceRoot":""}