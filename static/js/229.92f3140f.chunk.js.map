{"version":3,"file":"static/js/229.92f3140f.chunk.js","mappings":"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","sources":["components/ChoosedMonth/ChoosedMonth.styled.jsx","components/ChoosedMonth/TacksOfDay.jsx","components/ChoosedMonth/ChoosedMonth.jsx","redux/tasks/selectors.js"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nexport const MonthCalendarHead = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 16px;\n  margin-top: 24px;\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  background-color: ${({ theme }) => theme.colors.backgroundSubcomponents};\n\n  @media screen and (min-width: 768px) {\n    margin-top: 32px;\n    padding: 14px 40px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    padding: 14px 60px;\n  }\n`;\nexport const Day = styled.span`\n  color: ${({ theme }) => theme.colors.colorBody};\n  /* font-family: Inter; */\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 1.12px; /* 112.5% */\n  text-transform: uppercase;\n`;\n\nexport const DayHolidays = styled.span`\n  color: #3e85f3;\n  /* font-family: Inter; */\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 1.12px; /* 112.5% */\n  text-transform: uppercase;\n`;\nexport const CalendarTable = styled.div`\n  margin-top: 14px;\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: repeat(${props => props.$columnsCount}, 94px);\n  /* grid-row-gap: 1px; */\n  /* grid-column-gap: 1px; */\n\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  background: ${({ theme }) => theme.colors.backgroundSubcomponents};\n  color: ${({ theme }) => theme.colors.colorBody};\n  /* font-family: Inter; */\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.2; /* 116.667% */\n  text-transform: uppercase;\n\n  @media screen and (min-width: 768px) {\n    margin-top: 18px;\n    grid-template-rows: repeat(${props => props.$columnsCount}, 144px);\n    font-size: 16px;\n    line-height: 1.12;\n  }\n\n  @media screen and (min-width: 1440px) {\n    margin-top: 15px;\n    grid-template-rows: repeat(${props => props.$columnsCount}, 125px);\n  }\n`;\n\nexport const EmptyDateBlock = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundSubcomponents};\n  border: solid ${({ theme }) => theme.colors.colorCalendarBorder};\n  border-width: 0.5px;\n`;\nexport const DateCalendarMonth = styled(NavLink)`\n  cursor: pointer;\n  background-color: ${({ theme }) => theme.colors.backgroundSubcomponents};\n  display: flex;\n  justify-content: end;\n  padding-top: 8px;\n  padding-right: 4px;\n  border: solid ${({ theme }) => theme.colors.colorCalendarBorder};\n  border-width: 0.5px;\n\n  @media screen and (min-width: 768px) {\n    padding-top: 14px;\n    padding-right: 14px;\n  }\n`;\n\nexport const DayOfMonth = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 4px 6px;\n  width: 20px;\n  height: 22px;\n  border-radius: 6px;\n  color: ${props => (props.$active ? '#fff' : 'inherit')};\n  background-color: ${props => (props.$active ? '#3e85f3' : 'inherit')};\n\n  @media screen and (min-width: 768px) {\n    width: 27px;\n    height: 26px;\n  }\n`;\n\n// export const DateNoSelected = styled.div`\n//   display: flex;\n//   padding: 4px 8px;\n//   justify-content: center;\n//   align-items: center;\n//   width: 20px;\n//   height: 22px;\n\n//   @media screen and (min-width: 768px) {\n//     width: 27px;\n//     height: 26px;\n//   }\n// `;\n","import React from 'react';\n\nfunction TacksOfDay({ currentDay, tasks }) {\n  const tasksOfDay = tasks.filter(task => task.date === currentDay);\n\n  return (\n    <div>\n      {tasksOfDay.map(task => (\n        <div key={task._id}>{task.title}</div>\n      ))}\n    </div>\n  );\n}\n\nexport default TacksOfDay;\n","import {\n  MonthCalendarHead,\n  DayHolidays,\n  DateCalendarMonth,\n  CalendarTable,\n  Day,\n  EmptyDateBlock,\n  DayOfMonth,\n} from './ChoosedMonth.styled';\nimport { nanoid } from 'nanoid';\nimport {\n  format,\n  startOfWeek,\n  addDays,\n  parse,\n  // parseISO,\n  // isValid,\n  // add,\n  endOfWeek,\n  endOfMonth,\n  eachDayOfInterval,\n  add,\n} from 'date-fns';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\n// import { useEffect } from 'react';\n// import { fetchTasks } from 'redux/tasks/operations';\n// import { CalendarToolBar } from 'components/CalendarToolBar/CalendarToolBar';\n// import { useState } from 'react';\n// import { useLocation, useNavigate } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { fetchTasks } from 'redux/tasks/operations';\n// import { selectTasks } from 'redux/tasks/selectors';\nimport { selectCurrentDate } from 'redux/auth/selectors';\nimport { selectTasks } from 'redux/tasks/selectors';\nimport TacksOfDay from './TacksOfDay';\n\nconst ChoosedMonth = () => {\n  const dispatch = useDispatch();\n  // const location = useLocation();\n\n  const tasks = useSelector(selectTasks);\n  const selectDate = useSelector(selectCurrentDate);\n\n  const formattedDate = format(selectDate, 'MMMM yyyy');\n  let firstDayCurrentMonth = parse(formattedDate, 'MMMM yyyy', new Date());\n\n  const result = eachDayOfInterval({\n    start: startOfWeek(firstDayCurrentMonth, { weekStartsOn: 1 }),\n    end: endOfWeek(endOfMonth(firstDayCurrentMonth), { weekStartsOn: 1 }),\n  });\n\n  // const dateFormat = format(selectDate, 'yyyy-MM');\n\n  const currentMonth = format(\n    add(firstDayCurrentMonth, { months: 0 }),\n    'yyyy-MM'\n  );\n  console.log(currentMonth);\n\n  useEffect(() => {\n    dispatch(fetchTasks(currentMonth));\n  }, [dispatch, currentMonth]);\n\n  const startDayOfWeek = startOfWeek(new Date(), { weekStartsOn: 1 });\n  const weekDays = [];\n\n  const renderDayOfWeek = () => {\n    for (let day = 0; day < 7; day++) {\n      if (window.screen.width < 768) {\n        weekDays.push(format(addDays(startDayOfWeek, day), 'EEEEE'));\n      } else {\n        weekDays.push(format(addDays(startDayOfWeek, day), 'EEE'));\n      }\n    }\n    return weekDays;\n  };\n\n  const resultDate = result.map(day => {\n    if (format(day, 'MMMM yyyy') !== formattedDate) {\n      return <EmptyDateBlock key={day.toString()}></EmptyDateBlock>;\n    } else {\n      return (\n        <DateCalendarMonth\n          data-day={format(day, 'yyyy-MM-dd')}\n          key={day.toString()}\n          to={`/calendar/day/${format(day, 'yyyy-MM-dd')}`}\n        >\n          {format(day, 'd MMMM') === format(new Date(), 'd MMMM') ? (\n            <DayOfMonth $active={true}>{format(day, 'd')}</DayOfMonth>\n          ) : (\n            <DayOfMonth $active={false}>{format(day, 'd')}</DayOfMonth>\n          )}\n          <TacksOfDay\n            currentDay={format(day, 'yyyy-MM-dd')}\n            tasks={tasks}\n          ></TacksOfDay>\n        </DateCalendarMonth>\n      );\n    }\n  });\n\n  // const taskResult = tasks.map(task => {\n  //   return <div key={task._id}>{task}</div>;\n  // });\n\n  return (\n    <>\n      <MonthCalendarHead>\n        {renderDayOfWeek().map(day => {\n          if (day === 'Sat' || day === 'Sun') {\n            return <DayHolidays key={nanoid()}>{day}</DayHolidays>;\n          }\n          return <Day key={nanoid()}>{day}</Day>;\n        })}\n      </MonthCalendarHead>\n      {result.length > 35 ? (\n        <CalendarTable $columnsCount={6}>{resultDate}</CalendarTable>\n      ) : (\n        <CalendarTable $columnsCount={5}>{resultDate}</CalendarTable>\n      )}\n    </>\n  );\n};\n\nexport default ChoosedMonth;\n","export const selectTasks = state => state.tasks.items;\nexport const selectIsLoading = state => state.tasks.isLoading;\nexport const selectError = state => state.tasks.error;\n"],"names":["MonthCalendarHead","styled","_templateObject","_taggedTemplateLiteral","_ref","theme","colors","backgroundSubcomponents","Day","_templateObject2","_ref2","colorBody","DayHolidays","_templateObject3","CalendarTable","_templateObject4","props","$columnsCount","_ref3","_ref4","EmptyDateBlock","_templateObject5","_ref5","_ref6","colorCalendarBorder","DateCalendarMonth","NavLink","_templateObject6","_ref7","_ref8","DayOfMonth","_templateObject7","$active","currentDay","tasksOfDay","tasks","filter","task","date","_jsx","children","map","title","_id","dispatch","useDispatch","useSelector","selectTasks","selectDate","selectCurrentDate","formattedDate","format","firstDayCurrentMonth","parse","Date","result","eachDayOfInterval","start","startOfWeek","weekStartsOn","end","endOfWeek","endOfMonth","currentMonth","add","months","console","log","useEffect","fetchTasks","startDayOfWeek","weekDays","resultDate","day","toString","_jsxs","to","concat","TacksOfDay","_Fragment","window","screen","width","push","addDays","renderDayOfWeek","nanoid","length","state","items"],"sourceRoot":""}