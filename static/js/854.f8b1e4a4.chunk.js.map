{"version":3,"file":"static/js/854.f8b1e4a4.chunk.js","mappings":"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","sources":["components/CalendarToolBar/PeriodSelect/PeriodSelect.styled.jsx","components/CalendarToolBar/PeriodSelect/PeriodSelect.jsx","components/CalendarToolBar/CalendarToolBar.jsx","pages/CalendarPage/CalendarPage.jsx"],"sourcesContent":["import { styled } from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const PeriodTypeSelect = styled.div`\n  display: flex;\n  margin-top: 18px;\n  color: #3e85f3;\n  text-align: center;\n  /* font-family: Inter; */\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 1.28;\n\n  @media screen and (min-width: 768px) {\n    margin-top: 0;\n    font-size: 16px;\n    line-height: 1.12;\n  }\n`;\n\nexport const BtnTypeSelectMonth = styled(NavLink)`\n  padding: 8px 16px;\n  border-radius: 8px 0px 0px 8px;\n  border-right: 1px solid rgba(62, 133, 243, 0.2);\n  background: ${props => (props.$active === true ? '#cae8ff' : '#e3f3ff')};\n  cursor: pointer;\n`;\nexport const BtnTypeSelectDay = styled(NavLink)`\n  padding: 8px 25px;\n  border-radius: 0px 8px 8px 0px;\n  background: ${props => (props.$active === true ? '#cae8ff' : '#e3f3ff')};\n  cursor: pointer;\n`;\n","import { format } from 'date-fns';\nimport {\n  BtnTypeSelectDay,\n  BtnTypeSelectMonth,\n  PeriodTypeSelect,\n} from './PeriodSelect.styled';\nimport { useSelector } from 'react-redux';\nimport { selectCurrentDate } from 'redux/auth/selectors';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport const PeriodSelect = ({ setPeriodType, activePeriod }) => {\n  const choosedDate = useSelector(selectCurrentDate);\n\n  const periodURL = useParams().currentDay; // поточний день в рядку браузера\n\n  useEffect(() => {\n    if (periodURL) {\n      setPeriodType('day');\n    } else {\n      setPeriodType('month');\n    }\n  });\n\n  const date = format(choosedDate, 'yyyy-MM-dd');\n  const month = format(choosedDate, 'yyyy-MM');\n  return (\n    <PeriodTypeSelect>\n      <BtnTypeSelectMonth\n        to={`month/${month}`}\n        $active={activePeriod === 'month'}\n        onClick={() => {\n          setPeriodType('month');\n        }}\n      >\n        Month\n      </BtnTypeSelectMonth>\n      <BtnTypeSelectDay\n        to={`day/${date}`}\n        $active={activePeriod === 'day'}\n        onClick={() => {\n          setPeriodType('day');\n        }}\n      >\n        Day\n      </BtnTypeSelectDay>\n    </PeriodTypeSelect>\n  );\n};\n","import { Wrapper } from './CalendarToolBar.styled';\nimport { PeriodSelect } from './PeriodSelect/PeriodSelect';\n\nimport { WrapperPaginator } from './WrapperPaginator/WrapperPaginator';\n\nexport const CalendarToolBar = ({\n  dayInterval,\n  onNext,\n  onPrev,\n  dateToday,\n  onClickDate,\n  activePeriod,\n  setPeriodType,\n  setOpen,\n  open,\n}) => {\n  return (\n    <Wrapper>\n      <WrapperPaginator\n        dayInterval={dayInterval}\n        onNext={onNext}\n        onPrev={onPrev}\n        dateToday={dateToday}\n        onClickDate={onClickDate}\n        activePeriod={activePeriod}\n        setOpen={setOpen}\n        open={open}\n      />\n      <PeriodSelect setPeriodType={setPeriodType} activePeriod={activePeriod} />\n    </Wrapper>\n  );\n};\n","import Spinner from 'components/Spinner/Spinner';\nimport { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\n\nimport { CalendarToolBar } from 'components/CalendarToolBar/CalendarToolBar';\nimport {\n  add,\n  eachDayOfInterval,\n  endOfMonth,\n  endOfWeek,\n  format,\n  parse,\n  startOfWeek,\n} from 'date-fns';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { setCurrentDate } from 'redux/auth/authSlice';\nimport { selectCurrentDate } from 'redux/auth/selectors';\n\nconst CalendarPage = () => {\n  const dispatch = useDispatch();\n\n  const [activePeriod, setActivePeriod] = useState('month');\n  const [open, setOpen] = useState(false);\n\n  const selectDate = useSelector(selectCurrentDate);\n  const formattedDate = format(selectDate, 'MMMM yyyy');\n  const formattedOneDay = format(selectDate, 'yyyy-MM-dd');\n\n  let firstDayCurrentMonth = parse(formattedDate, 'MMMM yyyy', selectDate);\n  let currentDay = parse(formattedOneDay, 'yyyy-MM-dd', selectDate);\n\n  const handleClick = e => {\n    const selectedDate = e.currentTarget.dataset.day;\n    // console.log(selectedDate);\n    const parsedDateArray = selectedDate.split('-');\n    const choosedDay = new Date(\n      parsedDateArray[0],\n      parsedDateArray[1] - 1,\n      parsedDateArray[2]\n    );\n    const dayTimeStamp = choosedDay.getTime();\n    dispatch(setCurrentDate(dayTimeStamp));\n    setOpen(false);\n  };\n\n  const nextDate = () => {\n    if (activePeriod === 'day') {\n      const nextDay = add(currentDay, { days: 1 });\n      const dayTimeStamp = nextDay.getTime();\n      dispatch(setCurrentDate(dayTimeStamp));\n      // setActivePeriod('day');\n    } else {\n      let currentDayNextMonth = add(currentDay, { months: 1 });\n      const dateTimeStamp = currentDayNextMonth.getTime();\n      dispatch(setCurrentDate(dateTimeStamp));\n      // setActivePeriod('month');\n    }\n  };\n\n  const prevDate = () => {\n    if (activePeriod === 'day') {\n      const prevDay = add(currentDay, { days: -1 });\n      const dayTimeStamp = prevDay.getTime();\n      dispatch(setCurrentDate(dayTimeStamp));\n      // setActivePeriod('day');\n    } else {\n      let currentDayPrevMonth = add(currentDay, { months: -1 });\n      const dateTimeStamp = currentDayPrevMonth.getTime();\n      dispatch(setCurrentDate(dateTimeStamp));\n      // setActivePeriod('month');\n    }\n  };\n\n  const result = eachDayOfInterval({\n    start: startOfWeek(firstDayCurrentMonth, { weekStartsOn: 1 }),\n    end: endOfWeek(endOfMonth(firstDayCurrentMonth), { weekStartsOn: 1 }),\n  });\n\n  return (\n    <>\n      <CalendarToolBar\n        dayInterval={result}\n        onNext={nextDate}\n        onPrev={prevDate}\n        dateToday={formattedDate}\n        onClickDate={handleClick}\n        setPeriodType={setActivePeriod}\n        activePeriod={activePeriod}\n        setOpen={setOpen}\n        open={open}\n      />\n      <Suspense fallback={<Spinner />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default CalendarPage;\n"],"names":["PeriodTypeSelect","styled","_templateObject","_taggedTemplateLiteral","BtnTypeSelectMonth","NavLink","_templateObject2","props","$active","BtnTypeSelectDay","_templateObject3","PeriodSelect","_ref","setPeriodType","activePeriod","choosedDate","useSelector","selectCurrentDate","periodURL","useParams","currentDay","useEffect","date","format","month","_jsxs","children","_jsx","to","concat","onClick","CalendarToolBar","dayInterval","onNext","onPrev","dateToday","onClickDate","setOpen","open","Wrapper","WrapperPaginator","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","setActivePeriod","_useState3","_useState4","selectDate","formattedDate","formattedOneDay","firstDayCurrentMonth","parse","result","eachDayOfInterval","start","startOfWeek","weekStartsOn","end","endOfWeek","endOfMonth","_Fragment","dayTimeStamp","add","days","getTime","setCurrentDate","dateTimeStamp","months","e","parsedDateArray","currentTarget","dataset","day","split","Date","Suspense","fallback","Spinner","Outlet"],"sourceRoot":""}