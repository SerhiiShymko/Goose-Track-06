{"version":3,"file":"static/js/30.65ace702.chunk.js","mappings":"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","sources":["components/ChoosedMonth/ChoosedMonth.styled.jsx","components/ChoosedMonth/ChoosedMonth.jsx","components/CalendarToolBar/CalendarToolBar.jsx","pages/CalendarPage/CalendarPage.jsx","../node_modules/date-fns/esm/eachDayOfInterval/index.js","../node_modules/date-fns/esm/endOfMonth/index.js","../node_modules/date-fns/esm/endOfWeek/index.js"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const MonthCalendarHead = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 16px;\n  margin-top: 24px;\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  background-color: ${({ theme }) => theme.colors.backgroundSubcomponents};\n\n  @media screen and (min-width: 768px) {\n    margin-top: 32px;\n    padding: 14px 40px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    padding: 14px 60px;\n  }\n`;\nexport const Day = styled.span`\n  color: ${({ theme }) => theme.colors.colorBody};\n  /* font-family: Inter; */\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 1.12px; /* 112.5% */\n  text-transform: uppercase;\n`;\n\nexport const DayHolidays = styled.span`\n  color: #3e85f3;\n  /* font-family: Inter; */\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 1.12px; /* 112.5% */\n  text-transform: uppercase;\n`;\nexport const CalendarTable = styled.div`\n  margin-top: 14px;\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: repeat(6, 94px);\n  grid-row-gap: 1px;\n  grid-column-gap: 1px;\n\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  background: rgba(220, 227, 229, 0.5);\n  color: ${({ theme }) => theme.colors.colorBody};\n  /* font-family: Inter; */\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.2; /* 116.667% */\n  text-transform: uppercase;\n\n  @media screen and (min-width: 768px) {\n    margin-top: 18px;\n    grid-template-rows: repeat(6, 144px);\n    font-size: 16px;\n    line-height: 1.12;\n  }\n\n  @media screen and (min-width: 1440px) {\n    margin-top: 15px;\n    grid-template-rows: repeat(6, 125px);\n  }\n`;\n\nexport const CalendarTableShortMonth = styled.div`\n  margin-top: 14px;\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: repeat(5, 94px);\n  /* grid-row-gap: 1px;\n  grid-column-gap: 1px; */\n\n  border-radius: 8px;\n  /* border: 1px solid rgba(220, 227, 229, 0.5); */\n  //background: rgba(220, 227, 229, 0.5);\n  background: ${({ theme }) => theme.colors.backgroundSubcomponents};\n  color: ${({ theme }) => theme.colors.colorBody};\n  /* font-family: Inter; */\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.2; /* 116.667% */\n  text-transform: uppercase;\n\n  @media screen and (min-width: 768px) {\n    margin-top: 18px;\n    grid-template-rows: repeat(5, 144px);\n    font-size: 16px;\n    line-height: 1.12;\n  }\n\n  @media screen and (min-width: 1440px) {\n    margin-top: 15px;\n    grid-template-rows: repeat(5, 125px);\n  }\n`;\n\nexport const EmptyDateBlock = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundSubcomponents};\n  border: solid ${({ theme }) => theme.colors.colorCalendarBorder};\n  border-width: 0.5px;\n`;\nexport const DateCalendarMonth = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundSubcomponents};\n  display: flex;\n  justify-content: end;\n  padding-top: 8px;\n  padding-right: 4px;\n  border: solid ${({ theme }) => theme.colors.colorCalendarBorder};\n  border-width: 0.5px;\n\n  @media screen and (min-width: 768px) {\n    padding-top: 14px;\n    padding-right: 14px;\n  }\n`;\n\nexport const DateActive = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 4px 6px;\n  width: 20px;\n  height: 22px;\n  border-radius: 6px;\n  color: #fff;\n  background-color: #3e85f3;\n\n  @media screen and (min-width: 768px) {\n    width: 27px;\n    height: 26px;\n  }\n`;\n\nexport const DateNoSelected = styled.div`\n  display: flex;\n  padding: 4px 8px;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  height: 22px;\n\n  @media screen and (min-width: 768px) {\n    width: 27px;\n    height: 26px;\n  }\n`;\n","import {\n  MonthCalendarHead,\n  DayHolidays,\n  DateCalendarMonth,\n  DateActive,\n  DateNoSelected,\n  CalendarTable,\n  Day,\n  EmptyDateBlock,\n  CalendarTableShortMonth,\n} from './ChoosedMonth.styled';\nimport { nanoid } from 'nanoid';\nimport {\n  format,\n  startOfWeek,\n  addDays,\n  parse,\n  // parseISO,\n  // isValid,\n  add,\n} from 'date-fns';\nimport { useDispatch } from 'react-redux';\n// import { useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchTasks } from 'redux/tasks/operations';\n\nexport const ChoosedMonth = ({ dayInterval, onNext, onPrev, dateToday }) => {\n  const dispatch = useDispatch();\n  // const items = useSelector(state => state.tasks.items)\n  // console.log(items)\n\n  let firstDayCurrentMonth = parse(dateToday, 'MMMM yyyy', new Date());\n  // const dateFormat = format(firstDayCurrentMonth, 'yyyy-MM', new Date());\n\n  const lastMonth = format(\n    add(firstDayCurrentMonth, { months: -1 }),\n    'yyyy-MM'\n  );\n\n  useEffect(() => {\n    dispatch(fetchTasks(lastMonth));\n  }, [dispatch, lastMonth]);\n\n  const startDayOfWeek = startOfWeek(new Date(), { weekStartsOn: 1 });\n  const weekDays = [];\n\n  const renderDayOfWeek = () => {\n    for (let day = 0; day < 7; day++) {\n      if (window.screen.width < 768) {\n        weekDays.push(format(addDays(startDayOfWeek, day), 'EEEEE'));\n      } else {\n        weekDays.push(format(addDays(startDayOfWeek, day), 'EEE'));\n      }\n    }\n    return weekDays;\n  };\n\n  const resultDate = dayInterval.map(day => {\n    if (format(day, 'MMMM yyyy') !== dateToday) {\n      return <EmptyDateBlock key={day.toString()}></EmptyDateBlock>;\n    } else if (format(day, 'd MMMM') === format(new Date(), 'd MMMM')) {\n      return (\n        <DateCalendarMonth key={day.toString()}>\n          <DateActive>{format(day, 'd')}</DateActive>\n        </DateCalendarMonth>\n      );\n    } else {\n      return (\n        <DateCalendarMonth key={day.toString()}>\n          <DateNoSelected>{format(day, 'd')}</DateNoSelected>\n        </DateCalendarMonth>\n      );\n    }\n  });\n\n  return (\n    <>\n      <MonthCalendarHead>\n        {renderDayOfWeek().map(day => {\n          if (day === 'Sat' || day === 'Sun') {\n            return <DayHolidays key={nanoid()}>{day}</DayHolidays>;\n          }\n          return <Day key={nanoid()}>{day}</Day>;\n        })}\n      </MonthCalendarHead>\n      {dayInterval.length > 35 ? (\n        <CalendarTable>{resultDate}</CalendarTable>\n      ) : (\n        <CalendarTableShortMonth>{resultDate}</CalendarTableShortMonth>\n      )}\n    </>\n  );\n};\n","import {\n  Wrapper,\n  PeriodTypeSelect,\n  BtnTypeSelectMonth,\n  BtnTypeSelectDay,\n} from './CalendarToolBar.styled';\n\nimport { WrapperPaginator } from './WrapperPaginator/WrapperPaginator';\n\nexport const CalendarToolBar = ({ dayInterval, onNext, onPrev, dateToday }) => {\n  return (\n    <Wrapper>\n      <WrapperPaginator dayInterval={dayInterval} onNext={onNext} onPrev={onPrev} dateToday={dateToday}/>\n      <PeriodTypeSelect>\n        <BtnTypeSelectMonth to=\"calendar/month/:currentDate\">\n          Month\n        </BtnTypeSelectMonth>\n        <BtnTypeSelectDay to=\"calendar/day/:currentDay\">Day</BtnTypeSelectDay>\n      </PeriodTypeSelect>\n    </Wrapper>\n  );\n};\n","import { CalendarToolBar } from 'components/CalendarToolBar/CalendarToolBar';\n\nimport { ChoosedMonth } from 'components/ChoosedMonth/ChoosedMonth';\nimport {\n  add,\n  eachDayOfInterval,\n  endOfMonth,\n  endOfWeek,\n  format,\n  parse,\n  startOfWeek,\n} from 'date-fns';\nimport { useState } from 'react';\n\n// import Spinner from 'components/Spinner/Spinner';\n// import { Suspense } from 'react';\n// import { Outlet } from 'react-router-dom';\n\nconst CalendarPage = () => {\n  const date = format(new Date(), 'MMMM yyyy');\n  const [activeDate, setActiveDate] = useState(date);\n\n  let firstDayCurrentMonth = parse(activeDate, 'MMMM yyyy', new Date());\n  \n  const nextMonth = () => {\n    let firstDayNextMonth = add(firstDayCurrentMonth, { months: 1 });\n    setActiveDate(format(firstDayNextMonth, 'MMMM yyyy'));\n  };\n\n  const prevMonth = () => {\n    let firstDayPrevMonth = add(firstDayCurrentMonth, { months: -1 });\n    setActiveDate(format(firstDayPrevMonth, 'MMMM yyyy'));\n  };\n\n  const result = eachDayOfInterval({\n    start: startOfWeek(firstDayCurrentMonth, { weekStartsOn: 1 }),\n    end: endOfWeek(endOfMonth(firstDayCurrentMonth), { weekStartsOn: 1 }),\n  });\n\n  return (\n    <>\n\n      <CalendarToolBar\n        dayInterval={result}\n        onNext={nextMonth}\n        onPrev={prevMonth}\n        dateToday={activeDate}\n      />\n      <ChoosedMonth\n        dayInterval={result}\n        onNext={nextMonth}\n        onPrev={prevMonth}\n        dateToday={activeDate}\n      />\n\n      {/* <Suspense fallback={<Spinner />}>\n        <Outlet />\n      </Suspense> */}\n    </>\n  );\n};\n\nexport default CalendarPage;\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachDayOfInterval\n * @category Interval Helpers\n * @summary Return the array of dates within the specified time interval.\n *\n * @description\n * Return the array of dates within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * const result = eachDayOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 9, 10)\n * })\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\nexport default function eachDayOfInterval(dirtyInterval, options) {\n  var _options$step;\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime();\n\n  // Throw an exception if start date is after end date or if any date is `Invalid Date`\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  var step = Number((_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1);\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setDate(currentDate.getDate() + step);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n  return dates;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import { getDefaultOptions } from \"../_lib/defaultOptions/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nexport default function endOfWeek(dirtyDate, options) {\n  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;\n  requiredArgs(1, arguments);\n  var defaultOptions = getDefaultOptions();\n  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);\n\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setDate(date.getDate() + diff);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}"],"names":["MonthCalendarHead","styled","_templateObject","_taggedTemplateLiteral","_ref","theme","colors","backgroundSubcomponents","Day","_templateObject2","_ref2","colorBody","DayHolidays","_templateObject3","CalendarTable","_templateObject4","_ref3","CalendarTableShortMonth","_templateObject5","_ref4","_ref5","EmptyDateBlock","_templateObject6","_ref6","_ref7","colorCalendarBorder","DateCalendarMonth","_templateObject7","_ref8","_ref9","DateActive","_templateObject8","DateNoSelected","_templateObject9","ChoosedMonth","dayInterval","dateToday","onNext","onPrev","dispatch","useDispatch","firstDayCurrentMonth","parse","Date","lastMonth","format","add","months","useEffect","fetchTasks","startDayOfWeek","startOfWeek","weekStartsOn","weekDays","resultDate","map","day","_jsx","toString","children","_jsxs","_Fragment","window","screen","width","push","addDays","renderDayOfWeek","nanoid","length","CalendarToolBar","Wrapper","WrapperPaginator","PeriodTypeSelect","BtnTypeSelectMonth","to","BtnTypeSelectDay","date","_useState","useState","_useState2","_slicedToArray","activeDate","setActiveDate","nextMonth","firstDayNextMonth","prevMonth","firstDayPrevMonth","result","eachDayOfInterval","start","end","endOfWeek","endOfMonth","dirtyInterval","options","_options$step","requiredArgs","arguments","interval","startDate","toDate","endDate","endTime","getTime","RangeError","dates","currentDate","setHours","step","Number","isNaN","setDate","getDate","dirtyDate","month","getMonth","setFullYear","getFullYear","_options$weekStartsOn","_options$locale","_options$locale$optio","_defaultOptions$local","_defaultOptions$local2","defaultOptions","getDefaultOptions","toInteger","locale","getDay","diff"],"sourceRoot":""}