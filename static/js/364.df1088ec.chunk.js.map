{"version":3,"file":"static/js/364.df1088ec.chunk.js","mappings":"4RAOaA,EAAiB,SAAAC,GAC5B,IAI0BC,EAJtBC,EAAO,EACPC,EAAa,EACbC,EAAO,EAAEC,GAAAC,EAAAA,EAAAA,GAEKN,GAAQ,IAA1B,IAAAK,EAAAE,MAAAN,EAAAI,EAAAG,KAAAJ,MAA4B,CAAC,IAAlBK,EAAGR,EAAAS,MACS,UAAjBD,EAAIE,UAAsBT,IAET,gBAAjBO,EAAIE,UAA4BR,IAEf,SAAjBM,EAAIE,UAAqBP,GAC/B,CAAC,OAAAQ,GAAAP,EAAAQ,EAAAD,EAAA,SAAAP,EAAAS,GAAA,CACD,MAAO,CAAEZ,KAAAA,EAAMC,WAAAA,EAAYC,KAAAA,EAC7B,EAQMW,EAAc,SAAAC,GAKlB,IAJA,IAAIC,EAAW,EAIfC,EAAA,EAAAC,EAFeC,OAAOC,OAAOL,GAELE,EAAAC,EAAAG,OAAAJ,IAAE,CACxBD,GADYE,EAAAD,EAEd,CACA,OAAOD,CACT,EAOaM,EAAuB,SAACC,EAAMP,GACzC,OAAOQ,KAAKC,MAAOF,EAAOP,EAAY,IACxC,EC9CaU,EAAc,SAAAC,GAAK,OAAIA,EAAMZ,MAAMa,KAAM,E,mBCAzCC,EAAc,SAAHC,GAAuB,IAAjBC,EAAKD,EAALC,MAAOC,EAAEF,EAAFE,GACnC,OACEC,EAAAA,EAAAA,KAAA,QAAAC,UACEC,EAAAA,EAAAA,MAAA,kBAAgBH,GAAIA,EAAII,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,OAAML,SAAA,EACpDD,EAAAA,EAAAA,KAAA,QAAMO,OAAO,KAAKC,UAAU,OAAOC,YAAa,KAChDT,EAAAA,EAAAA,KAAA,QAAMO,OAAO,OAAOC,UAAWV,EAAOW,YAAa,SAI3D,EAEaC,EAA6B,SAAAC,GACxC,IAAQC,EAAgBD,EAAhBC,EAAGC,EAAaF,EAAbE,EAAGrC,EAAUmC,EAAVnC,MACd,OACEwB,EAAAA,EAAAA,KAAA,KAAAC,UACED,EAAAA,EAAAA,KAAA,QAAMY,EAAGA,EAAGC,EAAGA,EAAGC,KAAK,OAAMb,SAC1BzB,KAIT,E,SClBauC,E,QAAeC,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yL,6wHCuHtC,EAxFmB,WACjB,IAAMpC,EAAQqC,EAERC,GAAWC,EAAAA,EAAAA,IAAY5B,GACvB6B,EAAUC,KAAKC,OAErBC,EAAAA,EAAAA,YAAU,WACRL,GAASM,EAAAA,EAAAA,IAAWJ,GACtB,GAAG,CAACF,EAAUE,IAEd,IAAMK,EAAa9D,EJoCW,SAACiB,EAAO8C,GAAI,OAC1C9C,EAAM+C,QAAO,SAAAvC,GAAI,OAAIA,EAAKsC,OAASA,CAAI,GAAE,CIrCPE,CAAiBhD,EAZnC,eAcViD,EJQyB,SAACJ,EAAYK,GAC5C,IAAMC,EAAgBpD,EAAY8C,GAC5BO,EAAkBrD,EAAYmD,GAEpC,MAAO,CACL,CACEG,KAAM,QACN5D,IAAKc,EAAqBsC,EAAW3D,KAAMiE,GAC3CG,MAAO/C,EAAqB2C,EAAahE,KAAMkE,IAEjD,CACEC,KAAM,cACN5D,IAAKc,EAAqBsC,EAAW1D,WAAYgE,GACjDG,MAAO/C,EAAqB2C,EAAa/D,WAAYiE,IAEvD,CACEC,KAAM,OACN5D,IAAKc,EAAqBsC,EAAWzD,KAAM+D,GAC3CG,MAAO/C,EAAqB2C,EAAa9D,KAAMgE,IAGrD,CI7BoBG,CAAkBV,EADf9D,EAAeiB,IAGpC,OACEkB,EAAAA,EAAAA,KAACe,EAAY,CAAAd,UACXD,EAAAA,EAAAA,KAACsC,EAAAA,EAAmB,CAACC,MAAM,OAAOC,OAAO,MAAKvC,UAC5CC,EAAAA,EAAAA,MAACuC,EAAAA,EAAQ,CACPC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,GAChDC,KAAMhB,EACNiB,OAAQ,GACRC,QAAS,GACTC,gBAAiB,EAAEjD,SAAA,EAEnBD,EAAAA,EAAAA,KAACmD,EAAAA,EAAa,CAACC,UAAU,KAEzBpD,EAAAA,EAAAA,KAACqD,EAAAA,EAAM,CACLC,UAAW,SAAA9E,GAAK,OAAIA,EAAM+E,OAAO,GAAGC,cAAgBhF,EAAMiF,MAAM,EAAE,EAClEC,MAAM,QACNC,aAAc,CAAEhB,IAAK,UACrBiB,SAAS,SACTpB,OAAQ,MAEVxC,EAAAA,EAAAA,KAAC6D,EAAAA,EAAK,CACJC,QAAQ,OACRC,KAAM,CAAEC,SAAU,GAAIlE,MAAO,UAAWmE,WAAY,KACpDC,WAAY,GACZC,UAAU,EACVC,UAAU,KAEZpE,EAAAA,EAAAA,KAACqE,EAAAA,EAAK,CACJF,UAAU,EACVG,KAAK,SACLC,OAAQ,CAAC,EAAG,KACZC,UAAW,EACXT,KAAM,CAAEC,SAAU,GAAIC,WAAY,IAAKnE,MAAO,WAC9CsE,UAAU,EACVF,WAAY,MAEdlE,EAAAA,EAAAA,KAACyE,EAAAA,EAAO,IACP/D,EAA2B,CAC1BE,EAAG,GACHC,EAAG,GACHrC,MAAO,QACP+B,OAAQ,KAETX,EAAY,CAAEE,MAAO,UAAWC,GAAI,cACpCH,EAAY,CAAEE,MAAO,UAAWC,GAAI,iBACrCC,EAAAA,EAAAA,KAAC0E,EAAAA,EAAG,CACFZ,QAAQ,MACRhD,KAAK,kBACL6D,OAAQ,EACRC,MAAO,CACLtB,UAAW,SAAAsB,GAAK,OAAIA,EAAQ,GAAG,EAC/B9D,KAAM,UACNkD,SAAU,GACVa,SAAU,MACVC,OAAQ,QAGZ9E,EAAAA,EAAAA,KAAC0E,EAAAA,EAAG,CACFZ,QAAQ,QACRhD,KAAK,oBACL6D,OAAQ,EACRC,MAAO,CACLtB,UAAW,SAAAsB,GAAK,OAAIA,EAAQ,GAAG,EAC/B9D,KAAM,UACNkD,SAAU,GACVa,SAAU,MACVC,OAAQ,aAOtB,EC7GA,EARuB,WACrB,OACE9E,EAAAA,EAAAA,KAAA+E,EAAAA,SAAA,CAAA9E,UACED,EAAAA,EAAAA,KAACgF,EAAU,KAGjB,C","sources":["components/Statistics/utils/utils.js","redux/tasks/selectors.js","components/Statistics/CustomizedChartComponents/components.jsx","components/Statistics/statistics.styled.jsx","components/Statistics/statistics.jsx","pages/StatisticsPage/StatisticsPage.jsx"],"sourcesContent":["/**\n * ==================================================================\n * Count task by all category\n * @param {Array<Objects>} dataUser\n * @param {Date} date\n * @returns {Object}\n */\nexport const countUserTasks = dataUser => {\n  let toDo = 0;\n  let inProgress = 0;\n  let done = 0;\n\n  for (const day of dataUser) {\n    if (day.category === 'to-do') toDo++;\n\n    if (day.category === 'in-progress') inProgress++;\n\n    if (day.category === 'done') done++;\n  }\n  return { toDo, inProgress, done };\n};\n\n/**\n * ======================================================\n * Culculate sum of all tasks\n * @param {Object} tasks\n * @returns {Number}\n */\nconst sumAllTasks = tasks => {\n  let allTasks = 0;\n\n  const values = Object.values(tasks);\n\n  for (const val of values) {\n    allTasks += val;\n  }\n  return allTasks;\n};\n/**\n *===========================================================\n * @param {number} task\n * @param {number} allTasks\n * @returns {Rounded number}\n */\nexport const culcRoundPercentData = (task, allTasks) => {\n  return Math.round((task / allTasks) * 100);\n};\n\n/**\n * ===============================================================\n * @param {Object} dataTasksByDay\n * @returns {Array<Objects>}\n */\nexport const culcStatistikData = (tasksByDay, tasksByMonth) => {\n  const allTasksByDay = sumAllTasks(tasksByDay);\n  const allTasksByMonth = sumAllTasks(tasksByMonth);\n\n  return [\n    {\n      name: 'To Do',\n      day: culcRoundPercentData(tasksByDay.toDo, allTasksByDay),\n      month: culcRoundPercentData(tasksByMonth.toDo, allTasksByMonth),\n    },\n    {\n      name: 'In Progress',\n      day: culcRoundPercentData(tasksByDay.inProgress, allTasksByDay),\n      month: culcRoundPercentData(tasksByMonth.inProgress, allTasksByMonth),\n    },\n    {\n      name: 'Done',\n      day: culcRoundPercentData(tasksByDay.done, allTasksByDay),\n      month: culcRoundPercentData(tasksByMonth.done, allTasksByMonth),\n    },\n  ];\n};\n\n/**\n * Filter data by day\n */\nexport const FilterTasksByDay = (tasks, date) =>\n  tasks.filter(task => task.date === date);\n","export const selectTasks = state => state.tasks.items;\nexport const selectIsLoading = state => state.tasks.isLoading;\nexport const selectError = state => state.tasks.error;\n","export const GradientBar = ({ color, id }) => {\n  return (\n    <defs>\n      <linearGradient id={id} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"100%\">\n        <stop offset=\"0%\" stopColor=\"#fff\" stopOpacity={0} />\n        <stop offset=\"100%\" stopColor={color} stopOpacity={0.8} />\n      </linearGradient>\n    </defs>\n  );\n};\n\nexport const CustomizedMostPopularLabel = props => {\n  const { x, y, value } = props;\n  return (\n    <g>\n      <text x={x} y={y} fill=\"#000\">\n        {value}\n      </text>\n    </g>\n  );\n};\n// export const CustomizedBar = ({ dataKey, data, colorGradient }) => {\n//   return (\n//     <Bar\n//       dataKey={dataKey}\n//       fill={colorGradient}\n//       radius={8}\n//       label={{\n//         formatter: label => label + '%',\n//         fill: '#343434',\n//         fontSize: 16,\n//         position: 'top',\n//         weight: 500,\n//       }}\n//     />\n//   );\n// };\n","import styled from 'styled-components';\n\nexport const WrapperChart = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  width: 860px;\n  height: 440px;\n  border-radius: 16px;\n  border-radius: 29px;\n  border: solid 1px #e3f3ff;\n`;\n","import React from 'react';\nimport {\n  BarChart,\n  Bar,\n  Tooltip,\n  XAxis,\n  YAxis,\n  Legend,\n  CartesianGrid,\n  ResponsiveContainer,\n} from 'recharts';\nimport {\n  countUserTasks,\n  culcStatistikData,\n  FilterTasksByDay,\n} from './utils/utils';\nimport { selectTasks } from 'redux/tasks/selectors';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  // CustomizedBar,\n  CustomizedMostPopularLabel,\n  GradientBar,\n} from './CustomizedChartComponents/components';\n\nimport { WrapperChart } from './statistics.styled';\nimport dataUserByMonth from './data/dataUser.json';\nimport { useEffect } from 'react';\nimport { fetchTasks } from 'redux/tasks/operations';\n// import {dataChart} from './data/dataChart'\n\nconst dateByDay = '2023-08-26';\n\nconst Statistics = () => {\n  const tasks = dataUserByMonth;\n  //   const tasks = useSelector(selectTasks);\n  const dispatch = useDispatch(selectTasks);\n  const dateNow = Date.now();\n\n  useEffect(() => {\n    dispatch(fetchTasks(dateNow));\n  }, [dispatch, dateNow]);\n\n  const tasksByDay = countUserTasks(FilterTasksByDay(tasks, dateByDay));\n  const tasksByMonth = countUserTasks(tasks);\n  const dataChart = culcStatistikData(tasksByDay, tasksByMonth);\n\n  return (\n    <WrapperChart>\n      <ResponsiveContainer width=\"100%\" height=\"97%\">\n        <BarChart\n          margin={{ top: 70, right: 40, left: 20, bottom: 0 }}\n          data={dataChart}\n          barGap={14}\n          barSize={27}\n          barBorderRadius={5}\n        >\n          <CartesianGrid vertical={false} />\n\n          <Legend\n            formatter={value => value.charAt(0).toUpperCase() + value.slice(1)}\n            align=\"right\"\n            wrapperStyle={{ top: '-100px' }}\n            iconType=\"circle\"\n            height={36}\n          />\n          <XAxis\n            dataKey=\"name\"\n            tick={{ fontSize: 14, color: '#343434', fontWeight: 400 }}\n            tickMargin={18}\n            tickLine={false}\n            axisLine={false}\n          />\n          <YAxis\n            tickLine={false}\n            type=\"number\"\n            domain={[0, 100]}\n            tickCount={7}\n            tick={{ fontSize: 14, fontWeight: 400, color: '#343434' }}\n            axisLine={false}\n            tickMargin={25}\n          />\n          <Tooltip />\n          {CustomizedMostPopularLabel({\n            x: 27,\n            y: 35,\n            value: 'Tasks',\n            offset: 50,\n          })}\n          {GradientBar({ color: '#FFD2DD', id: 'linearDay' })}\n          {GradientBar({ color: '#3E85F3', id: 'linearMonth' })}\n          <Bar\n            dataKey=\"day\"\n            fill=\"url(#linearDay)\"\n            radius={8}\n            label={{\n              formatter: label => label + '%',\n              fill: '#343434',\n              fontSize: 16,\n              position: 'top',\n              weight: 500,\n            }}\n          />\n          <Bar\n            dataKey=\"month\"\n            fill=\"url(#linearMonth)\"\n            radius={8}\n            label={{\n              formatter: label => label + '%',\n              fill: '#343434',\n              fontSize: 16,\n              position: 'top',\n              weight: 500,\n            }}\n          />\n        </BarChart>\n      </ResponsiveContainer>\n    </WrapperChart>\n  );\n};\n\nexport default Statistics;\n","import Statistics from 'components/Statistics/statistics';\n\nconst StatisticsPage = () => {\n  return (\n    <>\n      <Statistics />\n    </>\n  );\n};\n\nexport default StatisticsPage;\n"],"names":["countUserTasks","dataUser","_step","toDo","inProgress","done","_iterator","_createForOfIteratorHelper","s","n","day","value","category","err","e","f","sumAllTasks","tasks","allTasks","_i","_values","Object","values","length","culcRoundPercentData","task","Math","round","selectTasks","state","items","GradientBar","_ref","color","id","_jsx","children","_jsxs","x1","y1","x2","y2","offset","stopColor","stopOpacity","CustomizedMostPopularLabel","props","x","y","fill","WrapperChart","styled","_templateObject","_taggedTemplateLiteral","dataUserByMonth","dispatch","useDispatch","dateNow","Date","now","useEffect","fetchTasks","tasksByDay","date","filter","FilterTasksByDay","dataChart","tasksByMonth","allTasksByDay","allTasksByMonth","name","month","culcStatistikData","ResponsiveContainer","width","height","BarChart","margin","top","right","left","bottom","data","barGap","barSize","barBorderRadius","CartesianGrid","vertical","Legend","formatter","charAt","toUpperCase","slice","align","wrapperStyle","iconType","XAxis","dataKey","tick","fontSize","fontWeight","tickMargin","tickLine","axisLine","YAxis","type","domain","tickCount","Tooltip","Bar","radius","label","position","weight","_Fragment","Statistics"],"sourceRoot":""}