{"version":3,"file":"static/js/679.100a88eb.chunk.js","mappings":"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","sources":["components/Statistics/utils/utils.js","components/Statistics/CustomizedChartComponents/components.jsx","components/Statistics/statistics.styled.jsx","components/Statistics/statistics.jsx","pages/StatisticsPage/StatisticsPage.jsx","redux/tasks/selectors.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\n/**\n * ==================================================================\n * Count task by all category\n * @param {Array<Objects>} dataUser\n * @param {Date} date\n * @returns {Object}\n */\nexport const countUserTasks = dataUser => {\n  let toDo = 0;\n  let inProgress = 0;\n  let done = 0;\n\n  for (const day of dataUser) {\n    if (day.category === 'to-do') toDo++;\n\n    if (day.category === 'in-progress') inProgress++;\n\n    if (day.category === 'done') done++;\n  }\n  \n  return { toDo, inProgress, done};\n};\n\n/**\n * ======================================================\n * Culculate sum of all tasks\n * @param {Object} tasks\n * @returns {Number}\n */\nconst sumAllTasks = tasks => {\n  let allTasks = 0;\n\n  const values = Object.values(tasks);\n\n  for (const val of values) {\n    allTasks += val;\n  }\n  return allTasks;\n};\n\n/**\n * \n */\nexport const getCurrentDateByDay = (currentDay, currentDate) => {\n  const dayWithZero = ('0' + currentDay).slice(-2);\n  const currentMothWithoutDay = currentDate.slice(0, 8) + dayWithZero;\n\n  return currentMothWithoutDay;\n};\n\n/**\n *===========================================================\n * @param {number} task\n * @param {number} allTasks\n * @returns {Rounded number}\n */\nexport const culcRoundPercentData = (task, allTasks) => {\n  const data = Math.round((task / allTasks) * 100);\n\n  return data\n};\n\n/**\n * ===============================================================\n * @param {Object} dataTasksByDay\n * @returns {Array<Objects>}\n */\nexport const culcStatistikData = (tasksByDay, tasksByMonth) => {\n  const allTasksByDay = sumAllTasks(tasksByDay);\n  const allTasksByMonth = sumAllTasks(tasksByMonth);\n  \n  return [\n    {\n      name: 'To Do',\n      day: culcRoundPercentData(tasksByDay.toDo, allTasksByDay) || 0,\n      month: culcRoundPercentData(tasksByMonth.toDo, allTasksByMonth) || 0,\n    },\n    {\n      name: 'In Progress',\n      day: culcRoundPercentData(tasksByDay.inProgress, allTasksByDay) || 0,\n      month: culcRoundPercentData(tasksByMonth.inProgress, allTasksByMonth) || 0,\n    },\n    {\n      name: 'Done',\n      day: culcRoundPercentData(tasksByDay.done, allTasksByDay) || 0,\n      month: culcRoundPercentData(tasksByMonth.done, allTasksByMonth) || 0,\n    },\n  ];\n};\n\n/**\n * Filter data by day\n */\nexport const FilterTasksByDay = (tasks, day) => {\n  return tasks.filter(task => task.date === day);\n};\n\n  const useResize = () => {\n    const [size, setSize] = useState(0);\n    useEffect(() => {\n      const getSize = () => setSize(window.innerWidth);\n      getSize();\n      window.addEventListener('resize', getSize);\n      return () => window.removeEventListener('resize', getSize);\n    }, []);\n    return size;\n  };\n  export default useResize;\n","export const GradientBar = ({ color, id }) => {\n  return (\n    <defs>\n      <linearGradient id={id} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"100%\">\n        <stop offset=\"0%\" stopColor=\"#fff\" stopOpacity={0} />\n        <stop offset=\"100%\" stopColor={color} stopOpacity={0.8} />\n      </linearGradient>\n    </defs>\n  );\n};\n\nexport const CustomizedMostPopularLabel = props => {\n  const { x, y, value, fill} = props;\n  return (\n    <g>\n      <text x={x} y={y} fill={fill}>\n        {value}\n      </text>\n    </g>\n  );\n};\n// export const CustomizedBar = ({ dataKey, data, colorGradient }) => {\n//   return (\n//     <Bar\n//       dataKey={dataKey}\n//       fill={colorGradient}\n//       radius={8}\n//       label={{\n//         formatter: label => label + '%',\n//         fill: '#343434',\n//         fontSize: 16,\n//         position: 'top',\n//         weight: 500,\n//       }}\n//     />\n//   );\n// };\n","import styled from 'styled-components';\n\nexport const WrapperChart = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 44px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 307px;\n  height: 413px;\n  font-size: 14px;\n  font-weight: 400;\n  border-radius: 20px;\n  border: solid 2px #e3f3ff;\n\n  @media screen and (min-width: 768px) {\n    width: 640px;\n    height: 424px;\n    padding: 10px 18px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: 100%;\n    padding: 10px 26px;\n  }\n`;\n\nexport const StatisticWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0;\n  padding: 28px 14px;\n  margin-top: 64px;\n  width: 335px;\n  height: 684px;\n  border-radius: 16px;\n  background-color: #fff;\n  background-color: ${({ theme }) => theme.colors.backgroundAccent};\n\n  @media screen and (min-width: 375px) {\n    width: 335px;\n  }\n\n  @media screen and (min-width: 768px) {\n    align-items: center;\n    width: 704px;\n    height: 854px;\n    padding: 132px 32px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: 100%;\n    padding: 134px 113px;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: block;\n\n  @media screen and (min-width: 768px) {\n    width: 100%;\n    margin-left: 100px;\n  }\n  `;","import React from 'react';\nimport { useTheme } from 'styled-components';\nimport {\n  BarChart,\n  Bar,\n  Tooltip,\n  XAxis,\n  YAxis,\n  Legend,\n  CartesianGrid,\n  ResponsiveContainer,\n} from 'recharts';\nimport useResize, {\n  countUserTasks,\n  culcStatistikData,\n  FilterTasksByDay,\n  getCurrentDateByDay,\n} from './utils/utils';\nimport { selectTasks } from 'redux/tasks/selectors';\nimport {\n  CustomizedMostPopularLabel,\n  GradientBar,\n} from './CustomizedChartComponents/components';\nimport {  WrapperChart } from './statistics.styled';\nimport { useSelector } from 'react-redux';\n\nconst Statistics = ({ currentDay, currentDate }) => {\n  const tasks = useSelector(selectTasks);\n  const theme = useTheme();\n\n  const widthViewPort = useResize();\n\n  const searchingDay = getCurrentDateByDay(currentDay, currentDate);\n\n  const tasksByDay = countUserTasks(\n    FilterTasksByDay(tasks, searchingDay ?? '01')\n  );\n  const tasksByMonth = countUserTasks(tasks);\n  const dataChart = culcStatistikData(tasksByDay, tasksByMonth);\n\n  return (\n    <WrapperChart>\n      <ResponsiveContainer width=\"100%\" height=\"97%\">\n        <BarChart\n          margin={{ top: 70, right: 14, left: 14, bottom: 0 }}\n          data={dataChart}\n          barGap={widthViewPort < 768 ? 8 : 14}\n          barSize={widthViewPort < 768 ? 22 : 27}\n          barBorderRadius={5}\n        >\n          <CartesianGrid vertical={false} />\n          <Legend\n            formatter={value =>\n              'By ' + value.charAt(0).toUpperCase() + value.slice(1)\n            }\n            width={179}\n            height={18}\n            align={widthViewPort < 768 ? 'left' : 'right'}\n            iconType=\"circle\"\n            wrapperStyle={{\n              fontSize: widthViewPort < 768 ? 14 : 16,\n              top: widthViewPort < 768 ? -40 : -90,\n              color: theme.colors.colorBody,\n            }}\n          />\n          <XAxis\n            dataKey=\"name\"\n            tick={{ fill: theme.colors.colorBody }}\n            tickMargin={18}\n            tickLine={false}\n            axisLine={false}\n          />\n          <YAxis\n            tickLine={false}\n            type=\"number\"\n            domain={[0, 100]}\n            tickCount={7}\n            tick={{\n              fontWeight: 400,\n              fill: theme.colors.colorBody,\n            }}\n            axisLine={false}\n            tickMargin={25}\n          />\n          <Tooltip />\n          {CustomizedMostPopularLabel({\n            x: 22,\n            y: 35,\n            value: 'Tasks',\n            offset: 50,\n            fontWeight: 600,\n            fill: theme.colors.colorBody,\n          })}\n          {GradientBar({ color: '#FFD2DD', id: 'linearDay' })}\n          {GradientBar({ color: '#3E85F3', id: 'linearMonth' })}\n          <Bar\n            dataKey=\"day\"\n            fill=\"url(#linearDay)\"\n            radius={8}\n            label={{\n              formatter: label => label + '%',\n              fill: theme.colors.colorBody,\n              fontSize: widthViewPort < 768 ? 12 : 16,\n              position: 'top',\n              weight: 500,\n            }}\n          />\n          <Bar\n            dataKey=\"month\"\n            fill=\"url(#linearMonth)\"\n            radius={8}\n            label={{\n              formatter: label => label + '%',\n              fill: theme.colors.colorBody,\n              fontSize: widthViewPort < 768 ? 12 : 16,\n              position: 'top',\n              weight: 500,\n            }}\n          />\n        </BarChart>\n      </ResponsiveContainer>\n    </WrapperChart>\n  );\n};\n\nexport default Statistics;\n","import { WrapperPaginator } from 'components/CalendarToolBar/WrapperPaginator/WrapperPaginator';\nimport Statistics from 'components/Statistics/statistics';\nimport { StatisticWrapper } from 'components/Statistics/statistics.styled';\nimport {\n  add,\n  eachDayOfInterval,\n  endOfMonth,\n  endOfWeek,\n  format,\n  parse,\n  startOfWeek,\n} from 'date-fns';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { selectTasks } from 'redux/tasks/selectors';\nimport { fetchTasks } from 'redux/tasks/operations';\nimport { Wrapper } from 'components/Statistics/statistics.styled';\n\nconst StatisticsPage = () => {\n  const date = format(new Date(), 'MMMM yyyy');\n  const [activeDate, setActiveDate] = useState(date);\n  const [currentDay, setCurrentDay] = useState('1');\n  const dispatch = useDispatch(selectTasks);\n\n  let firstDayCurrentMonth = parse(activeDate, 'MMMM yyyy', new Date());\n  \n  const currentDate = format(new Date(activeDate), `yyyy-MM-dd`);\n\n  useEffect(() => {\n    dispatch(fetchTasks(currentDate));\n  }, [dispatch, currentDate]);\n\n  const handleClick = ({ target }) => {\n    setCurrentDay(target.textContent);\n  };\n\n  const nextMonth = () => {\n    let firstDayNextMonth = add(firstDayCurrentMonth, { months: 1 });\n    setActiveDate(format(firstDayNextMonth, 'MMMM yyyy'));\n  };\n\n  const prevMonth = () => {\n    let firstDayPrevMonth = add(firstDayCurrentMonth, { months: -1 });\n    setActiveDate(format(firstDayPrevMonth, 'MMMM yyyy'));\n  };\n  const result = eachDayOfInterval({\n    start: startOfWeek(firstDayCurrentMonth, { weekStartsOn: 1 }),\n    end: endOfWeek(endOfMonth(firstDayCurrentMonth), { weekStartsOn: 1 }),\n  });\n\n  return (\n    <StatisticWrapper>\n      <Wrapper>\n        <WrapperPaginator\n          handleClick={handleClick}\n          dayInterval={result}\n          onNext={nextMonth}\n          onPrev={prevMonth}\n          dateToday={activeDate}\n        />\n      </Wrapper>\n      <Statistics currentDate={currentDate} currentDay={currentDay} />\n    </StatisticWrapper>\n  );\n};\n\nexport default StatisticsPage;\n","export const selectTasks = state => state.tasks.items;\nexport const selectIsLoading = state => state.tasks.isLoading;\nexport const selectError = state => state.tasks.error;\n"],"names":["countUserTasks","dataUser","_step","toDo","inProgress","done","_iterator","_createForOfIteratorHelper","s","n","day","value","category","err","e","f","sumAllTasks","tasks","allTasks","_i","_values","Object","values","length","culcRoundPercentData","task","Math","round","_useState","useState","_useState2","_slicedToArray","size","setSize","useEffect","getSize","window","innerWidth","addEventListener","removeEventListener","GradientBar","_ref","color","id","_jsx","children","_jsxs","x1","y1","x2","y2","offset","stopColor","stopOpacity","CustomizedMostPopularLabel","props","x","y","fill","WrapperChart","styled","_templateObject","_taggedTemplateLiteral","StatisticWrapper","_templateObject2","theme","colors","backgroundAccent","Wrapper","_templateObject3","currentDay","currentDate","useSelector","selectTasks","useTheme","widthViewPort","useResize","searchingDay","dayWithZero","slice","getCurrentDateByDay","tasksByDay","filter","date","FilterTasksByDay","dataChart","tasksByMonth","allTasksByDay","allTasksByMonth","name","month","culcStatistikData","ResponsiveContainer","width","height","BarChart","margin","top","right","left","bottom","data","barGap","barSize","barBorderRadius","CartesianGrid","vertical","Legend","formatter","charAt","toUpperCase","align","iconType","wrapperStyle","fontSize","colorBody","XAxis","dataKey","tick","tickMargin","tickLine","axisLine","YAxis","type","domain","tickCount","fontWeight","Tooltip","Bar","radius","label","position","weight","format","Date","activeDate","setActiveDate","_useState3","_useState4","setCurrentDay","dispatch","useDispatch","firstDayCurrentMonth","parse","fetchTasks","result","eachDayOfInterval","start","startOfWeek","weekStartsOn","end","endOfWeek","endOfMonth","WrapperPaginator","handleClick","target","textContent","dayInterval","onNext","firstDayNextMonth","add","months","onPrev","firstDayPrevMonth","dateToday","Statistics","state","items"],"sourceRoot":""}