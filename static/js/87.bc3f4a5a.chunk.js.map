{"version":3,"file":"static/js/87.bc3f4a5a.chunk.js","mappings":"sOAEaA,EAAoBC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kXAOrB,SAAAC,GAAQ,OAAAA,EAALC,MAAkBC,OAAOC,uBAAuB,IAW5DC,EAAMP,EAAAA,GAAAA,KAAWQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,yLACnB,SAAAO,GAAQ,OAAAA,EAALL,MAAkBC,OAAOK,SAAS,IASnCC,EAAcX,EAAAA,GAAAA,KAAWY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,6LASzBW,EAAgBb,EAAAA,GAAAA,IAAUc,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,suBAW5B,SAAAa,GAAQ,OAAAA,EAALX,MAAkBC,OAAOK,SAAS,IAqBnCM,EAA0BhB,EAAAA,GAAAA,IAAUiB,IAAAA,GAAAf,EAAAA,EAAAA,GAAA,wwBAWjC,SAAAgB,GAAQ,OAAAA,EAALd,MAAkBC,OAAOC,uBAAuB,IACxD,SAAAa,GAAQ,OAAAA,EAALf,MAAkBC,OAAOK,SAAS,IAqBnCU,EAAiBpB,EAAAA,GAAAA,IAAUqB,IAAAA,GAAAnB,EAAAA,EAAAA,GAAA,kFAClB,SAAAoB,GAAQ,OAAAA,EAALlB,MAAkBC,OAAOC,uBAAuB,IACvD,SAAAiB,GAAQ,OAAAA,EAALnB,MAAkBC,OAAOmB,mBAAmB,IAGpDC,EAAoBzB,EAAAA,GAAAA,IAAU0B,IAAAA,GAAAxB,EAAAA,EAAAA,GAAA,4QACrB,SAAAyB,GAAQ,OAAAA,EAALvB,MAAkBC,OAAOC,uBAAuB,IAKvD,SAAAsB,GAAQ,OAAAA,EAALxB,MAAkBC,OAAOmB,mBAAmB,IASpDK,EAAa7B,EAAAA,GAAAA,IAAU8B,IAAAA,GAAA5B,EAAAA,EAAAA,GAAA,iSAiBvB6B,EAAiB/B,EAAAA,GAAAA,IAAUgC,IAAAA,GAAA9B,EAAAA,EAAAA,GAAA,4N,mGCZxC,EAlGqB,WAGnB,IAAM+B,GAAOC,EAAAA,EAAAA,GAAO,IAAIC,KAAQ,aAChCC,GAAqBC,EAAAA,EAAAA,UAASJ,GAAvBK,GAA4BC,EAAAA,EAAAA,GAAAH,EAAA,GAAlB,GAEbI,GAAuBC,EAAAA,EAAAA,GAAMH,EAAY,YAAa,IAAIH,MAexDO,GAASC,EAAAA,EAAAA,GAAkB,CAC/BC,OAAOC,EAAAA,EAAAA,GAAYL,EAAsB,CAAEM,aAAc,IACzDC,KAAKC,EAAAA,EAAAA,IAAUC,EAAAA,EAAAA,GAAWT,GAAuB,CAAEM,aAAc,MAiB7DI,GAAiBL,EAAAA,EAAAA,GAAY,IAAIV,KAAQ,CAAEW,aAAc,IACzDK,EAAW,GAaXC,EAAaV,EAAOW,KAAI,SAAAC,GAC5B,OAAIpB,EAAAA,EAAAA,GAAOoB,EAAK,eAAiBhB,GACxBiB,EAAAA,EAAAA,KAACnC,EAAc,GAAMkC,EAAIE,aACvBtB,EAAAA,EAAAA,GAAOoB,EAAK,aAAcpB,EAAAA,EAAAA,GAAO,IAAIC,KAAQ,WAEpDoB,EAAAA,EAAAA,KAAC9B,EAAiB,CAAAgC,UAChBF,EAAAA,EAAAA,KAAC1B,EAAU,CAAA4B,UAAEvB,EAAAA,EAAAA,GAAOoB,EAAK,QADHA,EAAIE,aAM5BD,EAAAA,EAAAA,KAAC9B,EAAiB,CAAAgC,UAChBF,EAAAA,EAAAA,KAACxB,EAAc,CAAA0B,UAAEvB,EAAAA,EAAAA,GAAOoB,EAAK,QADPA,EAAIE,WAKlC,IAEA,OACEE,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAF,SAAA,EAQEF,EAAAA,EAAAA,KAACxD,EAAiB,CAAA0D,SAtCE,WACtB,IAAK,IAAIH,EAAM,EAAGA,EAAM,EAAGA,IACrBM,OAAOC,OAAOC,MAAQ,IACxBX,EAASY,MAAK7B,EAAAA,EAAAA,IAAO8B,EAAAA,EAAAA,GAAQd,EAAgBI,GAAM,UAEnDH,EAASY,MAAK7B,EAAAA,EAAAA,IAAO8B,EAAAA,EAAAA,GAAQd,EAAgBI,GAAM,QAGvD,OAAOH,CACT,CA8BOc,GAAkBZ,KAAI,SAAAC,GACrB,MAAY,QAARA,GAAyB,QAARA,GACZC,EAAAA,EAAAA,KAAC5C,EAAW,CAAA8C,SAAiBH,IAAXY,EAAAA,EAAAA,QAEpBX,EAAAA,EAAAA,KAAChD,EAAG,CAAAkD,SAAiBH,IAAXY,EAAAA,EAAAA,MACnB,MAEDxB,EAAOyB,OAAS,IACfZ,EAAAA,EAAAA,KAAC1C,EAAa,CAAA4C,SAAEL,KAEhBG,EAAAA,EAAAA,KAACvC,EAAuB,CAAAyC,SAAEL,MAIlC,C","sources":["components/ChoosedMonth/ChoosedMonth.styled.jsx","components/ChoosedMonth/ChoosedMonth.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const MonthCalendarHead = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 16px;\n  margin-top: 24px;\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  background-color: ${({ theme }) => theme.colors.backgroundSubcomponents};\n\n  @media screen and (min-width: 768px) {\n    margin-top: 32px;\n    padding: 14px 40px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    padding: 14px 60px;\n  }\n`;\nexport const Day = styled.span`\n  color: ${({ theme }) => theme.colors.colorBody};\n  /* font-family: Inter; */\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 1.12px; /* 112.5% */\n  text-transform: uppercase;\n`;\n\nexport const DayHolidays = styled.span`\n  color: #3e85f3;\n  /* font-family: Inter; */\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 1.12px; /* 112.5% */\n  text-transform: uppercase;\n`;\nexport const CalendarTable = styled.div`\n  margin-top: 14px;\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: repeat(6, 94px);\n  grid-row-gap: 1px;\n  grid-column-gap: 1px;\n\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  background: rgba(220, 227, 229, 0.5);\n  color: ${({ theme }) => theme.colors.colorBody};\n  /* font-family: Inter; */\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.2; /* 116.667% */\n  text-transform: uppercase;\n\n  @media screen and (min-width: 768px) {\n    margin-top: 18px;\n    grid-template-rows: repeat(6, 144px);\n    font-size: 16px;\n    line-height: 1.12;\n  }\n\n  @media screen and (min-width: 1440px) {\n    margin-top: 15px;\n    grid-template-rows: repeat(6, 125px);\n  }\n`;\n\nexport const CalendarTableShortMonth = styled.div`\n  margin-top: 14px;\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: repeat(5, 94px);\n  /* grid-row-gap: 1px;\n  grid-column-gap: 1px; */\n\n  border-radius: 8px;\n  /* border: 1px solid rgba(220, 227, 229, 0.5); */\n  //background: rgba(220, 227, 229, 0.5);\n  background: ${({ theme }) => theme.colors.backgroundSubcomponents};\n  color: ${({ theme }) => theme.colors.colorBody};\n  /* font-family: Inter; */\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.2; /* 116.667% */\n  text-transform: uppercase;\n\n  @media screen and (min-width: 768px) {\n    margin-top: 18px;\n    grid-template-rows: repeat(5, 144px);\n    font-size: 16px;\n    line-height: 1.12;\n  }\n\n  @media screen and (min-width: 1440px) {\n    margin-top: 15px;\n    grid-template-rows: repeat(5, 125px);\n  }\n`;\n\nexport const EmptyDateBlock = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundSubcomponents};\n  border: solid ${({ theme }) => theme.colors.colorCalendarBorder};\n  border-width: 0.5px;\n`;\nexport const DateCalendarMonth = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundSubcomponents};\n  display: flex;\n  justify-content: end;\n  padding-top: 8px;\n  padding-right: 4px;\n  border: solid ${({ theme }) => theme.colors.colorCalendarBorder};\n  border-width: 0.5px;\n\n  @media screen and (min-width: 768px) {\n    padding-top: 14px;\n    padding-right: 14px;\n  }\n`;\n\nexport const DateActive = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 4px 6px;\n  width: 20px;\n  height: 22px;\n  border-radius: 6px;\n  color: #fff;\n  background-color: #3e85f3;\n\n  @media screen and (min-width: 768px) {\n    width: 27px;\n    height: 26px;\n  }\n`;\n\nexport const DateNoSelected = styled.div`\n  display: flex;\n  padding: 4px 8px;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  height: 22px;\n\n  @media screen and (min-width: 768px) {\n    width: 27px;\n    height: 26px;\n  }\n`;\n","import {\n  MonthCalendarHead,\n  DayHolidays,\n  DateCalendarMonth,\n  DateActive,\n  DateNoSelected,\n  CalendarTable,\n  Day,\n  EmptyDateBlock,\n  CalendarTableShortMonth,\n} from './ChoosedMonth.styled';\nimport { nanoid } from 'nanoid';\nimport {\n  format,\n  startOfWeek,\n  addDays,\n  parse,\n  // parseISO,\n  // isValid,\n  // add,\n  endOfWeek,\n  endOfMonth,\n  eachDayOfInterval,\n} from 'date-fns';\n// import { useDispatch } from 'react-redux';\n// import { useSelector } from 'react-redux';\n// import { useEffect } from 'react';\n// import { fetchTasks } from 'redux/tasks/operations';\n// import { CalendarToolBar } from 'components/CalendarToolBar/CalendarToolBar';\nimport { useState } from 'react';\n\nconst ChoosedMonth = () => {\n  // const dispatch = useDispatch();\n  //  const items = useSelector(state => state.tasks.items)\n  const date = format(new Date(), 'MMMM yyyy');\n  const [activeDate] = useState(date);\n\n  let firstDayCurrentMonth = parse(activeDate, 'MMMM yyyy', new Date());\n\n  // const handleClick = e => {\n  //   // const selectDate = e.currentTarget.dataset.day\n  // };\n  // const nextMonth = () => {\n  //   let firstDayNextMonth = add(firstDayCurrentMonth, { months: 1 });\n  //   setActiveDate(format(firstDayNextMonth, 'MMMM yyyy'));\n  // };\n\n  // const prevMonth = () => {\n  //   let firstDayPrevMonth = add(firstDayCurrentMonth, { months: -1 });\n  //   setActiveDate(format(firstDayPrevMonth, 'MMMM yyyy'));\n  // };\n\n  const result = eachDayOfInterval({\n    start: startOfWeek(firstDayCurrentMonth, { weekStartsOn: 1 }),\n    end: endOfWeek(endOfMonth(firstDayCurrentMonth), { weekStartsOn: 1 }),\n  });\n  // const currentDate = format(new Date(dateToday), `yyyy-MM`);\n  // console.log(currentDate)\n\n  //   const dateFormat = format(firstDayCurrentMonth, 'yyyy-MM', new Date());\n  // console.log(dateFormat)\n\n  // const lastMonth = format(\n  //   add(firstDayCurrentMonth, { months: -1 }),\n  //   'yyyy-MM'\n  // );\n\n  // useEffect(() => {\n  //   dispatch(fetchTasks(lastMonth));\n  // }, [dispatch, lastMonth]);\n\n  const startDayOfWeek = startOfWeek(new Date(), { weekStartsOn: 1 });\n  const weekDays = [];\n\n  const renderDayOfWeek = () => {\n    for (let day = 0; day < 7; day++) {\n      if (window.screen.width < 768) {\n        weekDays.push(format(addDays(startDayOfWeek, day), 'EEEEE'));\n      } else {\n        weekDays.push(format(addDays(startDayOfWeek, day), 'EEE'));\n      }\n    }\n    return weekDays;\n  };\n\n  const resultDate = result.map(day => {\n    if (format(day, 'MMMM yyyy') !== activeDate) {\n      return <EmptyDateBlock key={day.toString()}></EmptyDateBlock>;\n    } else if (format(day, 'd MMMM') === format(new Date(), 'd MMMM')) {\n      return (\n        <DateCalendarMonth key={day.toString()}>\n          <DateActive>{format(day, 'd')}</DateActive>\n        </DateCalendarMonth>\n      );\n    } else {\n      return (\n        <DateCalendarMonth key={day.toString()}>\n          <DateNoSelected>{format(day, 'd')}</DateNoSelected>\n        </DateCalendarMonth>\n      );\n    }\n  });\n\n  return (\n    <>\n      {/* <CalendarToolBar\n        dayInterval={dateToday}\n        onNext={onNext}\n        onPrev={onPrev}\n        dateToday={dateToday}\n        onClickDate = {handleClick}\n      /> */}\n      <MonthCalendarHead>\n        {renderDayOfWeek().map(day => {\n          if (day === 'Sat' || day === 'Sun') {\n            return <DayHolidays key={nanoid()}>{day}</DayHolidays>;\n          }\n          return <Day key={nanoid()}>{day}</Day>;\n        })}\n      </MonthCalendarHead>\n      {result.length > 35 ? (\n        <CalendarTable>{resultDate}</CalendarTable>\n      ) : (\n        <CalendarTableShortMonth>{resultDate}</CalendarTableShortMonth>\n      )}\n    </>\n  );\n};\n\nexport default ChoosedMonth;\n"],"names":["MonthCalendarHead","styled","_templateObject","_taggedTemplateLiteral","_ref","theme","colors","backgroundSubcomponents","Day","_templateObject2","_ref2","colorBody","DayHolidays","_templateObject3","CalendarTable","_templateObject4","_ref3","CalendarTableShortMonth","_templateObject5","_ref4","_ref5","EmptyDateBlock","_templateObject6","_ref6","_ref7","colorCalendarBorder","DateCalendarMonth","_templateObject7","_ref8","_ref9","DateActive","_templateObject8","DateNoSelected","_templateObject9","date","format","Date","_useState","useState","activeDate","_slicedToArray","firstDayCurrentMonth","parse","result","eachDayOfInterval","start","startOfWeek","weekStartsOn","end","endOfWeek","endOfMonth","startDayOfWeek","weekDays","resultDate","map","day","_jsx","toString","children","_jsxs","_Fragment","window","screen","width","push","addDays","renderDayOfWeek","nanoid","length"],"sourceRoot":""}