{"version":3,"file":"static/js/60.0e1e75bc.chunk.js","mappings":"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","sources":["components/CalendarToolBar/PeriodSelect/PeriodSelect.styled.jsx","components/CalendarToolBar/PeriodSelect/PeriodSelect.jsx","components/CalendarToolBar/CalendarToolBar.jsx","components/WrapperCalendar/WrapperCalendar.jsx","pages/CalendarPage/CalendarPage.jsx"],"sourcesContent":["import { styled } from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const PeriodTypeSelect = styled.div`\n  display: flex;\n  margin-top: 18px;\n  color: #3e85f3;\n  text-align: center;\n  /* font-family: Inter; */\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 1.28;\n\n  @media screen and (min-width: 768px) {\n    margin-top: 0;\n    font-size: 16px;\n    line-height: 1.12;\n  }\n`;\n\nexport const BtnTypeSelectMonth = styled(NavLink)`\n  padding: 8px 16px;\n  border-radius: 8px 0px 0px 8px;\n  border-right: 1px solid rgba(62, 133, 243, 0.2);\n  background: #e3f3ff;\n  cursor: pointer;\n  &.active {\n    background: #cae8ff;\n  }\n`;\nexport const BtnTypeSelectDay = styled(NavLink)`\n  padding: 8px 25px;\n  border-radius: 0px 8px 8px 0px;\n  background: #e3f3ff;\n  cursor: pointer;\n  &.active {\n    background: #cae8ff;\n  }\n`;\n","import { format } from 'date-fns';\nimport {\n  BtnTypeSelectDay,\n  BtnTypeSelectMonth,\n  PeriodTypeSelect,\n} from './PeriodSelect.styled';\nimport { useSelector } from 'react-redux';\nimport { selectCurrentDate } from 'redux/auth/selectors';\n\nexport const PeriodSelect = () => {\n  const choosedDate = useSelector(selectCurrentDate);\n\n  const date = format(choosedDate, 'yyyy-MM-dd');\n  const month = format(choosedDate, 'yyyy-MM');\n  return (\n    <PeriodTypeSelect>\n      <BtnTypeSelectMonth to={`month/${month}`}>Month</BtnTypeSelectMonth>\n      <BtnTypeSelectDay to={`day/${date}`}>Day</BtnTypeSelectDay>\n    </PeriodTypeSelect>\n  );\n};\n","// import { useState } from 'react';\nimport { Wrapper } from './CalendarToolBar.styled';\nimport { PeriodSelect } from './PeriodSelect/PeriodSelect';\n\nimport { WrapperPaginator } from './WrapperPaginator/WrapperPaginator';\n\nexport const CalendarToolBar = ({\n  dayInterval,\n  onNext,\n  onPrev,\n  dateToday,\n  onClickDate,\n}) => {\n  // const [activePeriod, setActivePeriod] = useState('month');\n\n  // const selectPeriod = value => {\n  //   setActivePeriod(value)\n  // }\n\n  return (\n    <Wrapper>\n      <WrapperPaginator\n        dayInterval={dayInterval}\n        onNext={onNext}\n        onPrev={onPrev}\n        dateToday={dateToday}\n        onClickDate={onClickDate}\n      />\n      <PeriodSelect />\n    </Wrapper>\n  );\n};\n","import { CalendarToolBar } from 'components/CalendarToolBar/CalendarToolBar';\n// import  ChoosedMonth  from \"components/ChoosedMonth/ChoosedMonth\";\n// import Spinner from 'components/Spinner/Spinner';\nimport {\n  add,\n  eachDayOfInterval,\n  endOfMonth,\n  endOfWeek,\n  format,\n  parse,\n  startOfWeek,\n} from 'date-fns';\n// import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { setCurrentDate } from 'redux/auth/authSlice';\n// import { Suspense } from \"react\";\n// import { Outlet } from \"react-router-dom\";\n\nexport const WrapperCalendar = () => {\n  const dispatch = useDispatch();\n  const location = useLocation();\n\n  // const date = format(new Date(), 'MMMM yyyy');\n  // const [activeDate, setActiveDate] = useState(date);\n\n  const selectDate = useSelector(state => state.auth.currentDate);\n  const formattedDate = format(selectDate, 'MMMM yyyy');\n  const formattedOneDay = format(selectDate, 'yyyy-MM-dd');\n\n  let firstDayCurrentMonth = parse(formattedDate, 'MMMM yyyy', new Date());\n  let currentDay = parse(formattedOneDay, 'yyyy-MM-dd', new Date());\n\n  const handleClick = e => {\n    // const selectDate = e.currentTarget.dataset.day;\n  };\n  const nextMonth = () => {\n    const locationDay = location.pathname.slice(10, 13);\n    if (locationDay === 'day' || location.pathname === '/statistics') {\n      const nextDay = add(currentDay, { days: 1 });\n      const dayTimeStamp = nextDay.getTime();\n      dispatch(setCurrentDate(dayTimeStamp));\n      console.log(nextDay);\n    } else {\n      let firstDayNextMonth = add(firstDayCurrentMonth, { months: 1 });\n      const dateTimeStamp = firstDayNextMonth.getTime();\n      dispatch(setCurrentDate(dateTimeStamp));\n    }\n  };\n\n  const prevMonth = () => {\n    const locationDay = location.pathname.slice(10, 13);\n    if (locationDay === 'day' || location.pathname === '/statistics') {\n      const prevDay = add(currentDay, { days: -1 });\n      const dayTimeStamp = prevDay.getTime();\n      dispatch(setCurrentDate(dayTimeStamp));\n      console.log(prevDay);\n    } else {\n      let firstDayPrevMonth = add(firstDayCurrentMonth, { months: -1 });\n      const dateTimeStamp = firstDayPrevMonth.getTime();\n      dispatch(setCurrentDate(dateTimeStamp));\n    }\n  };\n\n  const result = eachDayOfInterval({\n    start: startOfWeek(firstDayCurrentMonth, { weekStartsOn: 1 }),\n    end: endOfWeek(endOfMonth(firstDayCurrentMonth), { weekStartsOn: 1 }),\n  });\n\n  return (\n    <>\n      <CalendarToolBar\n        dayInterval={result}\n        onNext={nextMonth}\n        onPrev={prevMonth}\n        dateToday={formattedDate}\n        onClickDate={handleClick}\n      />\n      {/* <ChoosedMonth\n        dayInterval={result}\n        onNext={nextMonth}\n        onPrev={prevMonth}\n        dateToday={activeDate}\n      /> */}\n    </>\n  );\n};\n","// import { CalendarToolBar } from 'components/CalendarToolBar/CalendarToolBar';\n\n// import { ChoosedMonth } from 'components/ChoosedMonth/ChoosedMonth';\n// import {\n//   add,\n//   eachDayOfInterval,\n//   endOfMonth,\n//   endOfWeek,\n//   format,\n//   parse,\n//   startOfWeek,\n// } from 'date-fns';\n// import { useEffect } from 'react';\n// import { useState } from 'react';\n\nimport Spinner from 'components/Spinner/Spinner';\nimport { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { WrapperCalendar } from 'components/WrapperCalendar/WrapperCalendar';\n\nconst CalendarPage = () => {\n  \n\n  return (\n    <>\n      <WrapperCalendar />\n      <Suspense fallback={<Spinner />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default CalendarPage;\n"],"names":["PeriodTypeSelect","styled","_templateObject","_taggedTemplateLiteral","BtnTypeSelectMonth","NavLink","_templateObject2","BtnTypeSelectDay","_templateObject3","PeriodSelect","choosedDate","useSelector","selectCurrentDate","date","format","month","_jsxs","children","_jsx","to","concat","CalendarToolBar","_ref","dayInterval","onNext","onPrev","dateToday","onClickDate","Wrapper","WrapperPaginator","WrapperCalendar","dispatch","useDispatch","location","useLocation","selectDate","state","auth","currentDate","formattedDate","formattedOneDay","firstDayCurrentMonth","parse","Date","currentDay","result","eachDayOfInterval","start","startOfWeek","weekStartsOn","end","endOfWeek","endOfMonth","_Fragment","pathname","slice","nextDay","add","days","dayTimeStamp","getTime","setCurrentDate","console","log","dateTimeStamp","months","prevDay","e","Suspense","fallback","Spinner","Outlet"],"sourceRoot":""}