{"version":3,"file":"static/js/30.69b99e51.chunk.js","mappings":"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","sources":["components/CalendarToolBar/CalendarToolBar.jsx","pages/CalendarPage/CalendarPage.jsx","../node_modules/date-fns/esm/eachDayOfInterval/index.js","../node_modules/date-fns/esm/endOfMonth/index.js","../node_modules/date-fns/esm/endOfWeek/index.js"],"sourcesContent":["import {\n  Wrapper,\n  PeriodTypeSelect,\n  BtnTypeSelectMonth,\n  BtnTypeSelectDay,\n} from './CalendarToolBar.styled';\n\nimport { WrapperPaginator } from './WrapperPaginator/WrapperPaginator';\n\nexport const CalendarToolBar = ({ dayInterval, onNext, onPrev, dateToday }) => {\n  return (\n    <Wrapper>\n      <WrapperPaginator dayInterval={dayInterval} onNext={onNext} onPrev={onPrev} dateToday={dateToday}/>\n      <PeriodTypeSelect>\n        <BtnTypeSelectMonth to=\"calendar/month/:currentDate\">\n          Month\n        </BtnTypeSelectMonth>\n        <BtnTypeSelectDay to=\"calendar/day/:currentDay\">Day</BtnTypeSelectDay>\n      </PeriodTypeSelect>\n    </Wrapper>\n  );\n};\n","import { CalendarToolBar } from 'components/CalendarToolBar/CalendarToolBar';\nimport ChoosedDay from 'components/ChoosedDay/ChoosedDay';\n\n// import { ChoosedMonth } from 'components/ChoosedMonth/ChoosedMonth';\nimport {\n  add,\n  eachDayOfInterval,\n  endOfMonth,\n  endOfWeek,\n  format,\n  parse,\n  startOfWeek,\n} from 'date-fns';\nimport { useState } from 'react';\n\n// import Spinner from 'components/Spinner/Spinner';\n// import { Suspense } from 'react';\n// import { Outlet } from 'react-router-dom';\n\nconst CalendarPage = () => {\n  const date = format(new Date(), 'MMMM yyyy');\n  const [activeDate, setActiveDate] = useState(date);\n\n  let firstDayCurrentMonth = parse(activeDate, 'MMMM yyyy', new Date());\n  \n  const nextMonth = () => {\n    let firstDayNextMonth = add(firstDayCurrentMonth, { months: 1 });\n    setActiveDate(format(firstDayNextMonth, 'MMMM yyyy'));\n  };\n\n  const prevMonth = () => {\n    let firstDayPrevMonth = add(firstDayCurrentMonth, { months: -1 });\n    setActiveDate(format(firstDayPrevMonth, 'MMMM yyyy'));\n  };\n\n  const result = eachDayOfInterval({\n    start: startOfWeek(firstDayCurrentMonth, { weekStartsOn: 1 }),\n    end: endOfWeek(endOfMonth(firstDayCurrentMonth), { weekStartsOn: 1 }),\n  });\n\n  return (\n    <>\n\n      <CalendarToolBar\n        dayInterval={result}\n        onNext={nextMonth}\n        onPrev={prevMonth}\n        dateToday={activeDate}\n      />\n      {/* <ChoosedMonth\n        dayInterval={result}\n        onNext={nextMonth}\n        onPrev={prevMonth}\n        dateToday={activeDate}\n      /> */}\n      <ChoosedDay/>\n      {/* <Suspense fallback={<Spinner />}>\n        <Outlet />\n      </Suspense> */}\n    </>\n  );\n};\n\nexport default CalendarPage;\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachDayOfInterval\n * @category Interval Helpers\n * @summary Return the array of dates within the specified time interval.\n *\n * @description\n * Return the array of dates within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * const result = eachDayOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 9, 10)\n * })\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\nexport default function eachDayOfInterval(dirtyInterval, options) {\n  var _options$step;\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime();\n\n  // Throw an exception if start date is after end date or if any date is `Invalid Date`\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  var step = Number((_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1);\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setDate(currentDate.getDate() + step);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n  return dates;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import { getDefaultOptions } from \"../_lib/defaultOptions/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nexport default function endOfWeek(dirtyDate, options) {\n  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;\n  requiredArgs(1, arguments);\n  var defaultOptions = getDefaultOptions();\n  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);\n\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setDate(date.getDate() + diff);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}"],"names":["CalendarToolBar","_ref","dayInterval","onNext","onPrev","dateToday","_jsxs","Wrapper","children","_jsx","WrapperPaginator","PeriodTypeSelect","BtnTypeSelectMonth","to","BtnTypeSelectDay","date","format","Date","_useState","useState","_useState2","_slicedToArray","activeDate","setActiveDate","firstDayCurrentMonth","parse","result","eachDayOfInterval","start","startOfWeek","weekStartsOn","end","endOfWeek","endOfMonth","_Fragment","firstDayNextMonth","add","months","firstDayPrevMonth","ChoosedDay","dirtyInterval","options","_options$step","requiredArgs","arguments","interval","startDate","toDate","endDate","endTime","getTime","RangeError","dates","currentDate","setHours","step","Number","isNaN","push","setDate","getDate","dirtyDate","month","getMonth","setFullYear","getFullYear","_ref2","_ref3","_options$weekStartsOn","_options$locale","_options$locale$optio","_defaultOptions$local","_defaultOptions$local2","defaultOptions","getDefaultOptions","toInteger","locale","day","getDay","diff"],"sourceRoot":""}