{"version":3,"file":"static/js/364.e59cb38c.chunk.js","mappings":"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","sources":["components/Statistics/statistics.styled.jsx","components/Statistics/utils/utils.js","redux/tasks/selectors.js","components/Statistics/CustomizedChartComponents/components.jsx","components/Statistics/statistics.jsx","pages/StatisticsPage/StatisticsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const WrapperChart = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  /* padding: 40px 40px 20px 20px; */\n  align-items: center;\n  width: 860px;\n  height: 440px;\n  border-radius: 16px;\n  margin: 0 auto;\n  border-radius: 29px;\n  border: solid 1px #e3f3ff;\n`;\n","/**\n * ==================================================================\n * Count task by all category\n * @param {Array<Objects>} dataUser\n * @param {Date} date\n * @returns {Object}\n */\nexport const countUserTasks = dataUser => {\n  let toDo = 0;\n  let inProgress = 0;\n  let done = 0;\n\n  for (const day of dataUser) {\n    if (day.category === 'to-do') toDo++;\n\n    if (day.category === 'in-progress') inProgress++;\n\n    if (day.category === 'done') done++;\n  }\n  return { toDo, inProgress, done };\n};\n\n/**\n * ======================================================\n * Culculate sum of all tasks\n * @param {Object} tasks\n * @returns {Number}\n */\nconst sumAllTasks = tasks => {\n  let allTasks = 0;\n\n  const values = Object.values(tasks);\n\n  for (const val of values) {\n    allTasks += val;\n  }\n  return allTasks;\n};\n/**\n *===========================================================\n * @param {number} task\n * @param {number} allTasks\n * @returns {Rounded number}\n */\nexport const culcRoundPercentData = (task, allTasks) => {\n  return Math.round((task / allTasks) * 100);\n};\n\n/**\n * ===============================================================\n * @param {Object} dataTasksByDay\n * @returns {Array<Objects>}\n */\nexport const culcStatistikData = (tasksByDay, tasksByMonth) => {\n  const allTasksByDay = sumAllTasks(tasksByDay);\n  const allTasksByMonth = sumAllTasks(tasksByMonth);\n\n  return [\n    {\n      name: 'To Do',\n      day: culcRoundPercentData(tasksByDay.toDo, allTasksByDay),\n      month: culcRoundPercentData(tasksByMonth.toDo, allTasksByMonth),\n    },\n    {\n      name: 'In Progress',\n      day: culcRoundPercentData(tasksByDay.inProgress, allTasksByDay),\n      month: culcRoundPercentData(tasksByMonth.inProgress, allTasksByMonth),\n    },\n    {\n      name: 'Done',\n      day: culcRoundPercentData(tasksByDay.done, allTasksByDay),\n      month: culcRoundPercentData(tasksByMonth.done, allTasksByMonth),\n    },\n  ];\n};\n\n  /**\n   * Filter data by day\n   */\nexport const FilterTasksByDay = (tasks, date) => tasks.filter(task => task.date === date);","export const selectTasks = state => state.tasks.items;\nexport const selectIsLoading = state => state.tasks.isLoading;\nexport const selectError = state => state.tasks.error;\n","import {\n  Bar,\n} from 'recharts';\n\n\nexport const GradientBar = ({ color, id }) => {\n  return (\n    <defs>\n      <linearGradient id={id} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"100%\">\n        <stop offset=\"0%\" stopColor=\"#fff\" />\n        <stop offset=\"100%\" stopColor={color} />\n      </linearGradient>\n    </defs>\n  );\n};\nexport const CustomizedBar = ({ dataKey, data, colorGradient }) => {\n  return (\n    <Bar\n      dataKey={dataKey}\n      fill={colorGradient}\n      radius={8}\n      label={{\n        formatter: label => label + '%',\n        fill: '#343434',\n        fontSize: 16,\n        position: 'top',\n        weight: 500,\n      }}\n    />\n  );\n};\n\n// export const CustomizedMostPopularLabel = props => {\n//   const { x, y, value } = props;\n//   return (\n//     <g>\n//       <text x={x} y={y} fill=\"#000\">\n//         value\n//       </text>\n//     </g>\n//   );\n// };\n","import { React, useEffect } from 'react';\nimport { WrapperChart } from './statistics.styled';\nimport {\n  BarChart,\n  // Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  ResponsiveContainer,\n} from 'recharts';\nimport {\n  countUserTasks,\n  culcStatistikData,\n  FilterTasksByDay,\n} from './utils/utils';\nimport { selectTasks } from 'redux/tasks/selectors';\nimport { useDispatch } from 'react-redux';\nimport {\n  CustomizedBar,\n  GradientBar,\n} from './CustomizedChartComponents/components';\nimport { fetchTasks } from 'redux/tasks/operations';\n\n// import {dataChart} from './data/dataChart'\nimport dataUserByMonth from './data/dataUser.json';\n\nconst dateByDay = '2023-08-26';\n\nconst Statistics = () => {\n  const tasks = dataUserByMonth;\n  //   const tasks = useSelector(selectTasks);\n  const dispatch = useDispatch(selectTasks);\n  const dateNow = Date.now();\n\n  useEffect(() => {\n    dispatch(fetchTasks(dateNow));\n  }, [dispatch, dateNow]);\n\n  const tasksByDay = countUserTasks(FilterTasksByDay(tasks, dateByDay));\n  const tasksByMonth = countUserTasks(tasks);\n  const dataChart = culcStatistikData(tasksByDay, tasksByMonth);\n\n  return (\n    <WrapperChart>\n      <ResponsiveContainer width=\"100%\" height=\"90%\">\n        <BarChart\n          margin={{ top: 40, right: 40, left: 20, bottom: 20 }}\n          label=\"heaf\"\n          data={dataChart}\n          barGap={14}\n          barSize={27}\n          barBorderRadius={5}\n        >\n          <CartesianGrid vertical={false} />\n          {/* <Legend verticalAlign=\"top\" align=\"right\" iconType=\"circle\" /> */}\n          {/* <Label\n            value='Tasks'\n            position=''\n          /> */}\n          <XAxis\n            dataKey=\"name\"\n            tick={{ fontSize: 14, color: '#343434', fontWeight: 400 }}\n            tickMargin={18}\n            tickLine={false}\n            axisLine={false}\n          />\n          <YAxis\n            tickLine={false}\n            label={{\n              offset: 20,\n              value: 'Tasks',\n              fontSize: 14,\n              position: 'top',\n            }}\n            type=\"number\"\n            domain={[0, 100]}\n            tickCount={7}\n            tick={{ fontSize: 14, fontWeight: 400, color: '#343434' }}\n            axisLine={false}\n            tickMargin={25}\n          />\n          {/* {CustomizedMostPopularLabel({ x: 50, y: 10, value: 'Test' })} */}\n          {GradientBar({ color: '#FFD2DD', id: 'linearDay' })}\n          {GradientBar({ color: '#3E85F3', id: 'linearMonth' })}\n          {CustomizedBar({\n            dataKey: 'day',\n            dataChart,\n            colorGradient: 'url(#linearDay)',\n          })}\n          {CustomizedBar({\n            dataKey: 'month',\n            dataChart,\n            colorGradient: 'url(#linearMonth)',\n          })}\n        </BarChart>\n      </ResponsiveContainer>\n    </WrapperChart>\n  );\n};\n\nexport default Statistics;\n","import Statistics from 'components/Statistics/statistics';\n\nconst StatisticsPage = () => {\n  return (\n    <>\n      <Statistics />\n    </>\n  );\n};\n\nexport default StatisticsPage;\n"],"names":["WrapperChart","styled","_templateObject","_taggedTemplateLiteral","countUserTasks","dataUser","_step","toDo","inProgress","done","_iterator","_createForOfIteratorHelper","s","n","day","value","category","err","e","f","sumAllTasks","tasks","allTasks","_i","_values","Object","values","length","culcRoundPercentData","task","Math","round","selectTasks","state","items","GradientBar","_ref","color","id","_jsx","children","_jsxs","x1","y1","x2","y2","offset","stopColor","CustomizedBar","_ref2","dataKey","colorGradient","data","Bar","fill","radius","label","formatter","fontSize","position","weight","dataUserByMonth","dispatch","useDispatch","dateNow","Date","now","useEffect","fetchTasks","tasksByDay","date","filter","FilterTasksByDay","dataChart","tasksByMonth","allTasksByDay","allTasksByMonth","name","month","culcStatistikData","ResponsiveContainer","width","height","BarChart","margin","top","right","left","bottom","barGap","barSize","barBorderRadius","CartesianGrid","vertical","XAxis","tick","fontWeight","tickMargin","tickLine","axisLine","YAxis","type","domain","tickCount","_Fragment","Statistics"],"sourceRoot":""}