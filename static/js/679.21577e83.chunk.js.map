{"version":3,"file":"static/js/679.21577e83.chunk.js","mappings":"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","sources":["components/Statistics/utils/utils.js","components/Statistics/CustomizedChartComponents/components.jsx","components/Statistics/statistics.styled.jsx","components/Statistics/statistics.jsx","pages/StatisticsPage/StatisticsPage.jsx","redux/tasks/selectors.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\n/**\n * ==================================================================\n * Count task by all category\n * @param {Array<Objects>} dataUser\n * @param {Date} date\n * @returns {Object}\n */\nexport const countUserTasks = dataUser => {\n  let toDo = 0;\n  let inProgress = 0;\n  let done = 0;\n\n  for (const day of dataUser) {\n    if (day.category === 'to-do') toDo++;\n\n    if (day.category === 'in-progress') inProgress++;\n\n    if (day.category === 'done') done++;\n  }\n  \n  return { toDo, inProgress, done};\n};\n\n/**\n * ======================================================\n * Culculate sum of all tasks\n * @param {Object} tasks\n * @returns {Number}\n */\nconst sumAllTasks = tasks => {\n  let allTasks = 0;\n\n  const values = Object.values(tasks);\n\n  for (const val of values) {\n    allTasks += val;\n  }\n  return allTasks;\n};\n\n// /**\n//  * \n//  */\n// export const getCurrentDateByDay = (currentDay, currentDate) => {\n//   const dayWithZero = ('0' + currentDay).slice(-2);\n//   const currentMothWithoutDay = currentDate.slice(0, 8) + dayWithZero;\n\n//   return currentMothWithoutDay;\n// };\n\n/**\n *===========================================================\n * @param {number} task\n * @param {number} allTasks\n * @returns {Rounded number}\n */\nexport const culcRoundPercentData = (task, allTasks) => {\n  const data = Math.round((task / allTasks) * 100);\n\n  return data\n};\n\n/**\n * ===============================================================\n * @param {Object} dataTasksByDay\n * @returns {Array<Objects>}\n */\nexport const culcStatistikData = (tasksByDay, tasksByMonth) => {\n  const allTasksByDay = sumAllTasks(tasksByDay);\n  const allTasksByMonth = sumAllTasks(tasksByMonth);\n  \n  return [\n    {\n      name: 'To Do',\n      day: culcRoundPercentData(tasksByDay.toDo, allTasksByDay) || 0,\n      month: culcRoundPercentData(tasksByMonth.toDo, allTasksByMonth) || 0,\n    },\n    {\n      name: 'In Progress',\n      day: culcRoundPercentData(tasksByDay.inProgress, allTasksByDay) || 0,\n      month: culcRoundPercentData(tasksByMonth.inProgress, allTasksByMonth) || 0,\n    },\n    {\n      name: 'Done',\n      day: culcRoundPercentData(tasksByDay.done, allTasksByDay) || 0,\n      month: culcRoundPercentData(tasksByMonth.done, allTasksByMonth) || 0,\n    },\n  ];\n};\n\n/**\n * Filter data by day\n */\nexport const FilterTasksByDay = (tasks, day) => {\n  return tasks.filter(task => task.date === day);\n};\n\n  const useResize = () => {\n    const [size, setSize] = useState(0);\n    useEffect(() => {\n      const getSize = () => setSize(window.innerWidth);\n      getSize();\n      window.addEventListener('resize', getSize);\n      return () => window.removeEventListener('resize', getSize);\n    }, []);\n    return size;\n  };\n  export default useResize;\n","export const GradientBar = ({ color, id }) => {\n  return (\n    <defs>\n      <linearGradient id={id} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"100%\">\n        <stop offset=\"0%\" stopColor=\"#fff\" stopOpacity={0} />\n        <stop offset=\"100%\" stopColor={color} stopOpacity={0.8} />\n      </linearGradient>\n    </defs>\n  );\n};\n\nexport const CustomizedMostPopularLabel = props => {\n  const { x, y, value, fill} = props;\n  return (\n    <g>\n      <text x={x} y={y} fill={fill}>\n        {value}\n      </text>\n    </g>\n  );\n};\n// export const CustomizedBar = ({ dataKey, data, colorGradient }) => {\n//   return (\n//     <Bar\n//       dataKey={dataKey}\n//       fill={colorGradient}\n//       radius={8}\n//       label={{\n//         formatter: label => label + '%',\n//         fill: '#343434',\n//         fontSize: 16,\n//         position: 'top',\n//         weight: 500,\n//       }}\n//     />\n//   );\n// };\n","import styled from 'styled-components';\n\nexport const WrapperChart = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 44px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 307px;\n  height: 413px;\n  font-size: 14px;\n  font-weight: 400;\n  border-radius: 20px;\n  border: 2px solid #e3f3ff;\n\n  @media screen and (min-width: 768px) {\n    width: 640px;\n    height: 424px;\n    padding: 10px 18px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: 100%;\n    padding: 10px 26px;\n  }\n`;\n\nexport const StatisticWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0;\n  padding: 28px 14px;\n  margin-top: 64px;\n  width: 335px;\n  height: 684px;\n  border-radius: 16px;\n  background-color: #fff;\n  background-color: ${({ theme }) => theme.colors.backgroundAccent};\n\n  @media screen and (min-width: 375px) {\n    width: 335px;\n  }\n\n  @media screen and (min-width: 768px) {\n    align-items: center;\n    width: 704px;\n    height: 854px;\n    padding: 132px 32px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: 100%;\n    padding: 134px 113px;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: block;\n\n  @media screen and (min-width: 768px) {\n    width: 100%;\n    margin-left: 100px;\n  }\n`;\n","import React from 'react';\nimport { useTheme } from 'styled-components';\nimport {\n  BarChart,\n  Bar,\n  Tooltip,\n  XAxis,\n  YAxis,\n  Legend,\n  CartesianGrid,\n  ResponsiveContainer,\n} from 'recharts';\nimport useResize, {\n  countUserTasks,\n  culcStatistikData,\n  FilterTasksByDay,\n} from './utils/utils';\nimport { selectTasks } from 'redux/tasks/selectors';\nimport {\n  CustomizedMostPopularLabel,\n  GradientBar,\n} from './CustomizedChartComponents/components';\nimport {  WrapperChart } from './statistics.styled';\nimport { useSelector } from 'react-redux';\n\nconst Statistics = ({ currentDate }) => {\n  const tasks = useSelector(selectTasks);\n  const theme = useTheme();\n  const widthViewPort = useResize();\n\n  const tasksByDay = countUserTasks(FilterTasksByDay(tasks, currentDate));\n  const tasksByMonth = countUserTasks(tasks);\n  const dataChart = culcStatistikData(tasksByDay, tasksByMonth);\n\n  return (\n    <WrapperChart>\n      <ResponsiveContainer width=\"100%\" height=\"97%\">\n        <BarChart\n          margin={{ top: 70, right: 14, left: 14, bottom: 0 }}\n          data={dataChart}\n          barGap={widthViewPort < 768 ? 8 : 14}\n          barSize={widthViewPort < 768 ? 22 : 27}\n          barBorderRadius={5}\n        >\n          <CartesianGrid vertical={false} />\n          <Legend\n            formatter={value =>\n              'By ' + value.charAt(0).toUpperCase() + value.slice(1)\n            }\n            width={179}\n            height={18}\n            align={widthViewPort < 768 ? 'left' : 'right'}\n            iconType=\"circle\"\n            wrapperStyle={{\n              fontSize: widthViewPort < 768 ? 14 : 16,\n              top: widthViewPort < 768 ? -40 : -90,\n              color: theme.colors.colorBody,\n            }}\n          />\n          <XAxis\n            dataKey=\"name\"\n            tick={{ fill: theme.colors.colorBody }}\n            tickMargin={18}\n            tickLine={false}\n            axisLine={false}\n          />\n          <YAxis\n            tickLine={false}\n            type=\"number\"\n            domain={[0, 100]}\n            tickCount={7}\n            tick={{\n              fontWeight: 400,\n              fill: theme.colors.colorBody,\n            }}\n            axisLine={false}\n            tickMargin={25}\n          />\n          <Tooltip />\n          {CustomizedMostPopularLabel({\n            x: 22,\n            y: 35,\n            value: 'Tasks',\n            offset: 50,\n            fontWeight: 600,\n            fill: theme.colors.colorBody,\n          })}\n          {GradientBar({ color: '#FFD2DD', id: 'linearDay' })}\n          {GradientBar({ color: '#3E85F3', id: 'linearMonth' })}\n          <Bar\n            dataKey=\"day\"\n            fill=\"url(#linearDay)\"\n            radius={8}\n            label={{\n              formatter: label => label + '%',\n              fill: theme.colors.colorBody,\n              fontSize: widthViewPort < 768 ? 12 : 16,\n              position: 'top',\n              weight: 500,\n            }}\n          />\n          <Bar\n            dataKey=\"month\"\n            fill=\"url(#linearMonth)\"\n            radius={8}\n            label={{\n              formatter: label => label + '%',\n              fill: theme.colors.colorBody,\n              fontSize: widthViewPort < 768 ? 12 : 16,\n              position: 'top',\n              weight: 500,\n            }}\n          />\n        </BarChart>\n      </ResponsiveContainer>\n    </WrapperChart>\n  );\n};\n\nexport default Statistics;\n","import { WrapperPaginator } from 'components/CalendarToolBar/WrapperPaginator/WrapperPaginator';\nimport Statistics from 'components/Statistics/statistics';\nimport { StatisticWrapper } from 'components/Statistics/statistics.styled';\nimport {\n  add,\n  eachDayOfInterval,\n  endOfMonth,\n  endOfWeek,\n  format,\n  parse,\n  startOfWeek,\n} from 'date-fns';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchTasks } from 'redux/tasks/operations';\nimport { Wrapper } from 'components/Statistics/statistics.styled';\nimport { useLocation } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { setCurrentDate } from 'redux/auth/authSlice';\n\nconst StatisticsPage = () => {\n  const location = useLocation();\n  const dispatch = useDispatch();\n  \n  const date = format(new Date(), 'yyyy-MM-dd');\n  const [dataDate, setDataDate] = useState(date);\n  const dataMonth = dataDate.slice(0, 7)\n   \n  useEffect(() => {\n    dispatch(fetchTasks(dataMonth));\n  }, [dispatch, dataMonth]);\n  \n  const selectDate = useSelector(state => state.auth.currentDate);\n  const formattedDate = format(selectDate, 'MMMM yyyy');\n  const formattedOneDay = format(selectDate, 'yyyy-MM-dd');\n  \n  let firstDayCurrentMonth = parse(formattedDate, 'MMMM yyyy', new Date());\n  let currentDay = parse(formattedOneDay, 'yyyy-MM-dd', new Date());\n \n  const handleClick = ({ currentTarget }) => {\n    const selectedDate = currentTarget.dataset.day;\n    setDataDate(selectedDate);\n\n    const parsedDateArray = selectedDate.split('-');\n    const choosedDay = new Date(\n      parsedDateArray[0],\n      parsedDateArray[1] - 1,\n      parsedDateArray[2]\n    );\n    const dayTimeStamp = choosedDay.getTime();\n    dispatch(setCurrentDate(dayTimeStamp));\n  };\n\n\n\n \n const nextMonth = () => {\n   const locationDay = location.pathname.slice(10, 13);\n   if (locationDay === 'day' || location.pathname === '/statistics') {\n     const nextDay = add(currentDay, { days: 1 });\n     const dayTimeStamp = nextDay.getTime();\n     dispatch(setCurrentDate(dayTimeStamp));\n    \n   } else {\n     let firstDayNextMonth = add(firstDayCurrentMonth, { months: 1 });\n     const dateTimeStamp = firstDayNextMonth.getTime();\n     dispatch(setCurrentDate(dateTimeStamp));\n   }\n };\n\n const prevMonth = () => {\n   const locationDay = location.pathname.slice(10, 13);\n   if (locationDay === 'day' || location.pathname === '/statistics') {\n     const prevDay = add(currentDay, { days: -1 });\n     const dayTimeStamp = prevDay.getTime();\n     dispatch(setCurrentDate(dayTimeStamp));\n    \n   } else {\n     let firstDayPrevMonth = add(firstDayCurrentMonth, { months: -1 });\n     const dateTimeStamp = firstDayPrevMonth.getTime();\n     dispatch(setCurrentDate(dateTimeStamp));\n   }\n };\n\n const result = eachDayOfInterval({\n   start: startOfWeek(firstDayCurrentMonth, { weekStartsOn: 1 }),\n   end: endOfWeek(endOfMonth(firstDayCurrentMonth), { weekStartsOn: 1 }),\n });\n\n  return (\n    <StatisticWrapper>\n      <Wrapper>\n        <WrapperPaginator\n          dayInterval={result}\n          onNext={nextMonth}\n          onPrev={prevMonth}\n          dateToday={formattedDate}\n          onClickDate={handleClick}\n        />\n      </Wrapper>\n      <Statistics currentDate={dataDate} />\n    </StatisticWrapper>\n  );\n};\n\nexport default StatisticsPage;\n","export const selectTasks = state => state.tasks.items;\nexport const selectIsLoading = state => state.tasks.isLoading;\nexport const selectError = state => state.tasks.error;\n"],"names":["countUserTasks","dataUser","_step","toDo","inProgress","done","_iterator","_createForOfIteratorHelper","s","n","day","value","category","err","e","f","sumAllTasks","tasks","allTasks","_i","_values","Object","values","length","culcRoundPercentData","task","Math","round","_useState","useState","_useState2","_slicedToArray","size","setSize","useEffect","getSize","window","innerWidth","addEventListener","removeEventListener","GradientBar","_ref","color","id","_jsx","children","_jsxs","x1","y1","x2","y2","offset","stopColor","stopOpacity","CustomizedMostPopularLabel","props","x","y","fill","WrapperChart","styled","_templateObject","_taggedTemplateLiteral","StatisticWrapper","_templateObject2","theme","colors","backgroundAccent","Wrapper","_templateObject3","currentDate","useSelector","selectTasks","useTheme","widthViewPort","useResize","tasksByDay","filter","date","FilterTasksByDay","dataChart","tasksByMonth","allTasksByDay","allTasksByMonth","name","month","culcStatistikData","ResponsiveContainer","width","height","BarChart","margin","top","right","left","bottom","data","barGap","barSize","barBorderRadius","CartesianGrid","vertical","Legend","formatter","charAt","toUpperCase","slice","align","iconType","wrapperStyle","fontSize","colorBody","XAxis","dataKey","tick","tickMargin","tickLine","axisLine","YAxis","type","domain","tickCount","fontWeight","Tooltip","Bar","radius","label","position","weight","location","useLocation","dispatch","useDispatch","format","Date","dataDate","setDataDate","dataMonth","fetchTasks","selectDate","state","auth","formattedDate","formattedOneDay","firstDayCurrentMonth","parse","currentDay","result","eachDayOfInterval","start","startOfWeek","weekStartsOn","end","endOfWeek","endOfMonth","WrapperPaginator","dayInterval","onNext","pathname","dayTimeStamp","add","days","getTime","setCurrentDate","dateTimeStamp","months","onPrev","dateToday","onClickDate","selectedDate","currentTarget","dataset","parsedDateArray","split","Statistics","items"],"sourceRoot":""}